{"version":3,"sources":["pages/provider/Billing/ManualInvoice.jsx","pages/provider/Billing/ListManualInvoice.jsx","components/PaginationBar/index.js"],"names":["ManualInvoice","props","item","content","splitContent","comment","status","getStatusInfo","cons","BILLING_STATUS_INFO","react_default","a","createElement","className","getDateTime","createdAt","react_router_dom","to","concat","id","invoiceNumber","Badge","color","fixNumber","amount","defaultState","dropdownStatusName","isLoading","isOpenSideBar","dropdownStatusOpen","checkVoidStatus","start_date","end_date","defaultFilters","limit","offset","selected","desc","ordering","ListManualInvoice","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChangeFilterStatus","e","itemName","_e$target","target","value","name","Number","BILLING_STATUS","VOID","setState","filters","resetFilterData","getManualInvoiceList","handleFilterVoidBilling","checked","handleSendInvoice","alert","handleUpdateStatus","updateStatus","filter","_this$state","state","objectSpread","getDate","_d","sort","attributes","handleReactDatetimeChange","_ref","asyncToGenerator","regenerator_default","mark","_callee","who","date","wrap","_context","prev","next","Date","defineProperty","stop","_x","_x2","apply","arguments","getClassNameReactDatetimeDays","selectPageSize","tickCheckAll","selectPage","_ref2","Math","ceil","clearFilterData","toggleSelectStatus","exportCSV","_callee2","tableData","data","filename","options","_context2","ManualInvoiceData","result","getExportData","BILLING_EXPORT_CSV_CODE","PROVIDER_MANUAL_INVOICE","String","moment","valueOf","fieldSeparator","quoteStrings","decimalSeparator","showLabels","showTitle","useTextFile","useBom","useKeysAsHeaders","ExportToCsv","generateCsv","_this2","_this$state2","_this$props","loading","manualInvoiceArr","_this$filters","totalPage","count","paginationSetting","sortClass","title","get","Fragment","Col","Card","Loading","CardHeader","Row","xl","lg","xs","sm","DateTime_default","inputProps","placeholder","closeOnSelect","timeFormat","dateFormat","onChange","renderDay","currentDate","selectedDate","classes","assign","Button","size","onClick","disabled","length","CardBody","Table","responsive","classNames","map","i","Billing_ManualInvoice","key","check","handleCheckbox","openSideBar","toggleSideBar","setStatus","getProviderUpdateStatus","toggleAction","PaginationBar","setting","handleClick","Input","bsSize","type","Label","Component","mapActionToProps","connect","billing","manualInvoiceList","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","react_paginate__WEBPACK_IMPORTED_MODULE_1__","react_paginate__WEBPACK_IMPORTED_MODULE_1___default","previousLabel","nextLabel","breakLabel","breakClassName","breakLinkClassName","pageCount","forcePage","marginPagesDisplayed","marginPages","pageRangeDisplayed","pageRange","onPageChange","containerClassName","subContainerClassName","activeClassName","pageLinkClassName","pageClassName","previousClassName","nextClassName","previousLinkClassName","nextLinkClassName","disabledClassName"],"mappings":"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","file":"static/js/37.8c6dd759.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Badge } from \"reactstrap\";\r\nimport {\r\n  getDateTime,\r\n  getStatusInfo,\r\n  fixNumber,\r\n  splitContent,\r\n} from \"helpers/UtilsHelper\";\r\nimport cons from \"../../../constants\";\r\n\r\nconst ManualInvoice = (props) => {\r\n  const { item } = props;\r\n  const content = splitContent(item.comment);\r\n  const status = getStatusInfo(cons.BILLING_STATUS_INFO, item.status);\r\n  return (\r\n    <tr className=\"invoice\">\r\n      <td className=\"text-center\">\r\n        {getDateTime(item.createdAt, \"MM/DD/YYYY HH:mm:a\")}\r\n      </td>\r\n      <td className=\"text-center\">\r\n        <Link to={`/provider/billings/manual-invoice/detail/${item.id}`}>\r\n          #{item.invoiceNumber}\r\n        </Link>\r\n      </td>\r\n      <td className=\"text-center\">{content}</td>\r\n      <td className=\"text-center\">\r\n        <Badge\r\n          color={status ? status.color : \"danger\"}\r\n          className=\"badge-dot mr-4\"\r\n        >\r\n          <i className={`bg-${status ? status.color : \"danger\"}`} />\r\n          <span className=\"status\">{status ? status.status : \"Unknown\"}</span>\r\n        </Badge>\r\n      </td>\r\n      <td className=\"table-actions text-center\">{fixNumber(item.amount)}</td>\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport default ManualInvoice;\r\n","import React, { Component } from \"react\";\r\nimport moment from \"moment\";\r\nimport { connect } from \"react-redux\";\r\nimport classNames from \"classnames/bind\";\r\nimport ReactDatetime from \"react-datetime\";\r\nimport {\r\n  Button,\r\n  Card,\r\n  Table,\r\n  Row,\r\n  Col,\r\n  CardHeader,\r\n  CardBody,\r\n  Input,\r\n  Label,\r\n  ButtonGroup,\r\n  Dropdown,\r\n  DropdownToggle,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n} from \"reactstrap\";\r\nimport { getDate, getExportData } from \"../../../helpers/UtilsHelper\";\r\nimport {\r\n  getManualInvoiceList,\r\n  updateStatus,\r\n} from \"../../../redux/actions/billingAction\";\r\nimport { ExportToCsv } from \"export-to-csv\";\r\nimport PaginationBar from \"../../../components/PaginationBar\";\r\nimport Loading from \"../../../components/Loading\";\r\nimport cons from \"../../../constants\";\r\nimport ManualInvoice from \"./ManualInvoice\";\r\nimport \"./ListInvoice.scss\";\r\n\r\nconst defaultState = () => {\r\n  return {\r\n    dropdownStatusName: \"Status\",\r\n    status: \"\",\r\n    isLoading: true,\r\n    isOpenSideBar: false,\r\n    dropdownStatusOpen: false,\r\n    checkVoidStatus: false,\r\n    start_date: \"\",\r\n    end_date: \"\",\r\n  };\r\n};\r\nconst defaultFilters = () => {\r\n  return {\r\n    limit: 10,\r\n    offset: 0,\r\n    selected: 0,\r\n    desc: false,\r\n    status: \"\",\r\n    ordering: \"create_at\",\r\n  };\r\n};\r\n\r\nclass ListManualInvoice extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = defaultState();\r\n    this.filters = defaultFilters();\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.getManualInvoiceList(this.filters);\r\n  }\r\n\r\n  handleChangeFilterStatus = (e, itemName) => {\r\n    const { value, name } = e.target;\r\n    if (name === \"status\") {\r\n      if (Number(value) === cons.BILLING_STATUS.VOID) {\r\n        this.setState({ checkVoidStatus: true });\r\n      } else {\r\n        this.setState({ checkVoidStatus: false });\r\n      }\r\n    }\r\n    this.setState({ dropdownStatusName: itemName });\r\n    this.filters[name] = value;\r\n    this.resetFilterData();\r\n    this.props.getManualInvoiceList(this.filters);\r\n  };\r\n\r\n  handleFilterVoidBilling = (e) => {\r\n    const { checked } = e.target;\r\n    if (checked) {\r\n      this.filters.status = cons.BILLING_STATUS.VOID;\r\n      this.setState({ dropdownStatusName: \"Void created\" });\r\n    } else {\r\n      this.filters.status = \"\";\r\n      this.setState({ dropdownStatusName: \"All Status\" });\r\n    }\r\n    this.setState({ checkVoidStatus: checked });\r\n    this.resetFilterData();\r\n    this.props.getManualInvoiceList(this.filters);\r\n  };\r\n\r\n  handleSendInvoice = (id) => {\r\n    alert(`send Invoices to: ${id}`);\r\n    // this.props.sendInvoice()\r\n  };\r\n\r\n  handleUpdateStatus = (value, id) => {\r\n    const status = value;\r\n    this.props.updateStatus(status, id);\r\n  };\r\n\r\n  filter = () => {\r\n    const { start_date, end_date } = this.state;\r\n    this.filters = {\r\n      ...this.filters,\r\n      start_date: start_date ? getDate(start_date._d) : \"\",\r\n      end_date: end_date ? getDate(end_date._d) : \"\",\r\n    };\r\n    this.resetFilterData();\r\n    this.props.getManualInvoiceList(this.filters);\r\n  };\r\n\r\n  sort = (e) => {\r\n    let name = e.target.attributes.name.value;\r\n    if (name && name === this.filters.ordering) {\r\n      this.filters.desc = !this.filters.desc;\r\n    } else {\r\n      this.filters.ordering = name;\r\n      this.filters.desc = true;\r\n    }\r\n    this.resetFilterData();\r\n    this.props.getManualInvoiceList(this.filters);\r\n  };\r\n\r\n  handleReactDatetimeChange = async (who, date) => {\r\n    if (\r\n      this.state.start_date &&\r\n      who === \"end_date\" &&\r\n      new Date(this.state.start_date._d + \"\") > new Date(date._d + \"\")\r\n    ) {\r\n      await this.setState({\r\n        start_date: date,\r\n        end_date: date,\r\n      });\r\n      this.filter();\r\n    } else if (\r\n      this.state.end_date &&\r\n      who === \"start_date\" &&\r\n      new Date(this.state.end_date._d + \"\") < new Date(date._d + \"\")\r\n    ) {\r\n      await this.setState({\r\n        start_date: date,\r\n        end_date: date,\r\n      });\r\n      this.filter();\r\n    } else {\r\n      await this.setState({\r\n        [who]: date,\r\n      });\r\n      this.filter();\r\n    }\r\n  };\r\n\r\n  getClassNameReactDatetimeDays = (date) => {\r\n    if (this.state.start_date && this.state.end_date) {\r\n    }\r\n    if (\r\n      this.state.start_date &&\r\n      this.state.end_date &&\r\n      this.state.start_date._d + \"\" !== this.state.end_date._d + \"\"\r\n    ) {\r\n      if (\r\n        new Date(this.state.end_date._d + \"\") > new Date(date._d + \"\") &&\r\n        new Date(this.state.start_date._d + \"\") < new Date(date._d + \"\")\r\n      ) {\r\n        return \" middle-date\";\r\n      }\r\n      if (this.state.end_date._d + \"\" === date._d + \"\") {\r\n        return \" end-date\";\r\n      }\r\n      if (this.state.start_date._d + \"\" === date._d + \"\") {\r\n        return \" start-date\";\r\n      }\r\n    }\r\n    return \"\";\r\n  };\r\n\r\n  selectPageSize = (e) => {\r\n    const { value } = e.target;\r\n    if (value) {\r\n      this.resetFilterData();\r\n      this.setState({ isOpenSideBar: false, tickCheckAll: false });\r\n      this.filters.limit = value;\r\n      this.props.getManualInvoiceList(this.filters);\r\n    }\r\n  };\r\n\r\n  selectPage = ({ selected }) => {\r\n    this.filters.selected = selected || 0;\r\n    this.filters.offset = Math.ceil(selected * this.filters.limit);\r\n    this.setState({ isOpenSideBar: false, tickCheckAll: false });\r\n    this.props.getManualInvoiceList(this.filters);\r\n  };\r\n\r\n  resetFilterData = () => {\r\n    this.filters.offset = 0;\r\n    this.filters.selected = 0;\r\n  };\r\n\r\n  clearFilterData = () => {\r\n    this.filters = defaultFilters();\r\n    this.setState(defaultState());\r\n    this.props.getManualInvoiceList(this.filters);\r\n  };\r\n\r\n  toggleSelectStatus = () => {\r\n    this.setState({ dropdownStatusOpen: !this.state.dropdownStatusOpen });\r\n  };\r\n\r\n  exportCSV = async () => {\r\n    const tableData = this.props.ManualInvoiceData.result;\r\n    const data = getExportData(\r\n      tableData,\r\n      cons.BILLING_EXPORT_CSV_CODE.PROVIDER_MANUAL_INVOICE\r\n    );\r\n    const filename = String(moment().valueOf());\r\n    const options = {\r\n      filename,\r\n      fieldSeparator: \",\",\r\n      quoteStrings: '\"',\r\n      decimalSeparator: \".\",\r\n      showLabels: true,\r\n      showTitle: false,\r\n      useTextFile: false,\r\n      useBom: true,\r\n      useKeysAsHeaders: true,\r\n    };\r\n    const csvExporter = new ExportToCsv(options);\r\n    csvExporter.generateCsv(data);\r\n  };\r\n\r\n  render() {\r\n    const { dropdownStatusName, dropdownStatusOpen } = this.state;\r\n    const { ManualInvoiceData, loading } = this.props;\r\n    const manualInvoiceArr = ManualInvoiceData.result;\r\n    const { limit, selected } = this.filters;\r\n    const totalPage = Math.ceil(ManualInvoiceData.count / limit) || 0;\r\n    const paginationInfo = {\r\n      from: selected * limit + 1,\r\n      to:\r\n        (selected + 1) * limit < ManualInvoiceData.count\r\n          ? (selected + 1) * limit\r\n          : ManualInvoiceData.count,\r\n      total: ManualInvoiceData.count,\r\n      getShowOne: function () {\r\n        return this.from === this.to;\r\n      },\r\n    };\r\n    const paginationSetting = {\r\n      totalPage,\r\n      selected: this.filters.selected,\r\n    };\r\n    const sortClass = {\r\n      title: this.filters.ordering,\r\n      value: this.filters.desc,\r\n      get: function (name) {\r\n        if (this.title === name) {\r\n          return `sort ${this.value ? \"sort-desc\" : \"sort-asc\"}`;\r\n        }\r\n        return \"sort\";\r\n      },\r\n    };\r\n    return (\r\n      <>\r\n        <Col className=\"list-invoice\">\r\n          <Card className=\"mt-3\">\r\n            {loading && <Loading />}\r\n            <CardHeader className=\"bg-transparent border-0\">\r\n              <Row className=\"d-flex justify-content-between align-items-center\">\r\n                <Col\r\n                  className=\"d-flex justify-content-center justify-content-lg-start\"\r\n                  xl={10}\r\n                  lg={10}\r\n                  xs={12}\r\n                >\r\n                  <Row className=\"align-items-center\">\r\n                    <Col xs={12} sm={5}>\r\n                      <ReactDatetime\r\n                        className=\"custom-date-input\"\r\n                        inputProps={{\r\n                          placeholder: \"-- start date --\",\r\n                        }}\r\n                        closeOnSelect={true}\r\n                        value={this.state.start_date}\r\n                        timeFormat={false}\r\n                        dateFormat={\"MM/DD/YYYY\"}\r\n                        onChange={(e) =>\r\n                          this.handleReactDatetimeChange(\"start_date\", e)\r\n                        }\r\n                        renderDay={(props, currentDate, selectedDate) => {\r\n                          let classes = props.className;\r\n                          classes +=\r\n                            this.getClassNameReactDatetimeDays(currentDate);\r\n                          return (\r\n                            <td {...props} className={classes}>\r\n                              {currentDate.date()}\r\n                            </td>\r\n                          );\r\n                        }}\r\n                      ></ReactDatetime>\r\n                    </Col>\r\n                    <b className=\"d-sm-block d-none\">-</b>\r\n                    <Col xs={12} sm={5}>\r\n                      <ReactDatetime\r\n                        className=\"custom-date-input\"\r\n                        inputProps={{\r\n                          placeholder: \"-- end date --\",\r\n                        }}\r\n                        closeOnSelect={true}\r\n                        value={this.state.end_date}\r\n                        timeFormat={false}\r\n                        dateFormat={\"MM/DD/YYYY\"}\r\n                        onChange={(e) =>\r\n                          this.handleReactDatetimeChange(\"end_date\", e)\r\n                        }\r\n                        renderDay={(props, currentDate, selectedDate) => {\r\n                          let classes = props.className;\r\n                          classes +=\r\n                            this.getClassNameReactDatetimeDays(currentDate);\r\n                          return (\r\n                            <td {...props} className={classes}>\r\n                              {currentDate.date()}\r\n                            </td>\r\n                          );\r\n                        }}\r\n                      ></ReactDatetime>\r\n                    </Col>\r\n                    <Col sm={1} className=\"d-sm-block d-none\">\r\n                      <i className=\"fas fa-calendar-alt\"></i>\r\n                    </Col>\r\n                  </Row>\r\n                </Col>\r\n                {/* <Col\r\n                  className=\"d-flex justify-content-center justify-content-lg-start\"\r\n                  xl={4}\r\n                  lg={6}\r\n                  xs={12}\r\n                >\r\n                  <Row className=\"align-item-center m-3 m-lg-0\">\r\n                    <Dropdown\r\n                      isOpen={dropdownStatusOpen}\r\n                      toggle={this.toggleSelectStatus}\r\n                      className=\"list-invoice__dropdown\"\r\n                    >\r\n                      <DropdownToggle caret>\r\n                        {dropdownStatusName}\r\n                      </DropdownToggle>\r\n                      <DropdownMenu>\r\n                        <DropdownItem\r\n                          value=\"\"\r\n                          name=\"status\"\r\n                          onClick={(e) =>\r\n                            this.handleChangeFilterStatus(e, \"All\")\r\n                          }\r\n                        >\r\n                          All\r\n                        </DropdownItem>\r\n                        {cons.BILLING_STATUS_INFO.map((item) => {\r\n                          return (\r\n                            <DropdownItem\r\n                              key={item.id}\r\n                              name=\"status\"\r\n                              onClick={(e) =>\r\n                                this.handleChangeFilterStatus(\r\n                                  e,\r\n                                  `${item.status}`\r\n                                )\r\n                              }\r\n                              value={item.id}\r\n                            >\r\n                              {item.status}\r\n                            </DropdownItem>\r\n                          );\r\n                        })}\r\n                      </DropdownMenu>\r\n                    </Dropdown>\r\n                    <ButtonGroup\r\n                      className=\"btn-group-toggle\"\r\n                      data-toggle=\"buttons\"\r\n                    >\r\n                      <Button\r\n                        className=\"bg-transparent\"\r\n                        color=\"default\"\r\n                        outline\r\n                        onClick={this.filter}\r\n                      >\r\n                        <span>Filter</span>\r\n                        <i className=\"fas fa-filter fa-xs\"></i>\r\n                      </Button>\r\n                      <Button\r\n                        className=\"bg-transparent\"\r\n                        color=\"default\"\r\n                        outline\r\n                        onClick={this.clearFilterData}\r\n                      >\r\n                        <span>Clear</span>\r\n                        <i className=\"fas fa-eraser\"></i>\r\n                      </Button>\r\n                    </ButtonGroup>\r\n                  </Row>\r\n                </Col> */}\r\n                <Col\r\n                  className=\"d-flex justify-content-center justify-content-xl-end mt-lg-3 mt-xl-0\"\r\n                  xl={2}\r\n                  lg={2}\r\n                  xs={12}\r\n                >\r\n                  <Row className=\"align-items-center\">\r\n                    <Button\r\n                      className=\"mr-lg-3\"\r\n                      color=\"primary\"\r\n                      size=\"sm\"\r\n                      onClick={this.exportCSV}\r\n                      disabled={\r\n                        manualInvoiceArr && manualInvoiceArr.length === 0\r\n                      }\r\n                    >\r\n                      <span className=\"btn-inner--text\">Export</span>\r\n                    </Button>\r\n                    {/* <div className=\"d-flex align-items-center\">\r\n                      <small className=\"text-muted mr-3\">\r\n                     \r\n                        Display void invoices\r\n                      </small>\r\n                      <label className=\"custom-toggle mr-1\">\r\n                        <input\r\n                          type=\"checkbox\"\r\n                          onChange={this.handleFilterVoidBilling}\r\n                          checked={this.state.checkVoidStatus}\r\n                        />\r\n                        <span\r\n                          className=\"custom-toggle-slider rounded-circle\"\r\n                          data-label-off=\"All\"\r\n                          data-label-on=\"Void\"\r\n                        />\r\n                      </label>\r\n                    </div> */}\r\n                  </Row>\r\n                </Col>\r\n              </Row>\r\n            </CardHeader>\r\n          </Card>\r\n          <Card>\r\n            <CardBody className=\"container-table-billing\">\r\n              <Table className=\"align-items-center table-sort\" responsive>\r\n                <thead className=\"thead-light\">\r\n                  <tr>\r\n                    <th\r\n                      className={`text-center ${sortClass.get(\"created_at\")}`}\r\n                      name=\"created_at\"\r\n                      onClick={this.sort}\r\n                    >\r\n                      {\" \"}\r\n                      Date Created{\" \"}\r\n                    </th>\r\n                    <th className=\"text-center\"> Invoice number </th>\r\n                    <th\r\n                      className={classNames(\r\n                        \"text-center\",\r\n                        sortClass.get(\"comment\")\r\n                      )}\r\n                      name=\"comment\"\r\n                      onClick={this.sort}\r\n                    >\r\n                      {\" \"}\r\n                      Comment{\" \"}\r\n                    </th>\r\n                    <th\r\n                      className={`table__header__w-170 text-center ${sortClass.get(\r\n                        \"status\"\r\n                      )}`}\r\n                      name=\"status\"\r\n                      onClick={this.sort}\r\n                    >\r\n                      {\" \"}\r\n                      Status{\" \"}\r\n                    </th>\r\n                    <th\r\n                      className={classNames(\r\n                        \"text-center\",\r\n                        sortClass.get(\"amount\")\r\n                      )}\r\n                      name=\"amount\"\r\n                      onClick={this.sort}\r\n                    >\r\n                      {\" \"}\r\n                      Amount{\" \"}\r\n                    </th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody className=\"client\">\r\n                  {manualInvoiceArr &&\r\n                    manualInvoiceArr.map((item, i) => {\r\n                      return (\r\n                        <ManualInvoice\r\n                          key={i}\r\n                          check={this.handleCheckbox}\r\n                          openSideBar={this.toggleSideBar}\r\n                          item={item}\r\n                          setStatus={this.getProviderUpdateStatus}\r\n                          handleUpdateStatus={this.handleUpdateStatus}\r\n                          handleSendInvoice={this.handleSendInvoice}\r\n                          toggleAction={this.toggleAction}\r\n                        />\r\n                      );\r\n                    })}\r\n                </tbody>\r\n              </Table>\r\n            </CardBody>\r\n            {manualInvoiceArr && manualInvoiceArr.length > 0 && (\r\n              <Row className=\"d-flex justify-content-md-between justify-content-sm-start mb-3 mx-0\">\r\n                <Col className=\"d-flex justify-content-center\">\r\n                  {totalPage > 1 && (\r\n                    <PaginationBar\r\n                      setting={paginationSetting}\r\n                      handleClick={this.selectPage}\r\n                    />\r\n                  )}\r\n                </Col>\r\n                <Col\r\n                  className=\"d-flex align-items-baseline mb-md-0 mb-2\"\r\n                  xs=\"auto\"\r\n                >\r\n                  <Input\r\n                    onChange={this.selectPageSize}\r\n                    value={limit}\r\n                    bsSize=\"md\"\r\n                    type=\"select\"\r\n                    name=\"selectPageSize\"\r\n                    id=\"selectPageSize\"\r\n                  >\r\n                    <option value=\"5\">5</option>\r\n                    <option value=\"10\">10</option>\r\n                    <option value=\"20\">20</option>\r\n                    <option value=\"50\">50</option>\r\n                  </Input>\r\n                  <Label className=\"ml-1 text-nowrap\">\r\n                    {/* <small>\r\n                      {`${paginationInfo.from} ${\r\n                        paginationInfo.getShowOne()\r\n                          ? \"\"\r\n                          : `- ${paginationInfo.to}`\r\n                      } of ${paginationInfo.total}`}\r\n\r\n\r\n                      \r\n                    </small> */}\r\n\r\n                    <small>\r\n                      Page {`${selected + 1}`} of {`${totalPage}`}\r\n                    </small>\r\n                  </Label>\r\n                </Col>\r\n              </Row>\r\n            )}\r\n          </Card>\r\n        </Col>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    ManualInvoiceData: state.billing.manualInvoiceList,\r\n    loading: state.billing.loading,\r\n  };\r\n};\r\n\r\nconst mapActionToProps = { getManualInvoiceList, updateStatus };\r\n\r\nexport default connect(mapStateToProps, mapActionToProps)(ListManualInvoice);\r\n","import React from 'react';\r\nimport ReactPaginate from 'react-paginate';\r\nimport \"./style.scss\";\r\n\r\nconst PaginationBar = ({ setting, handleClick }) => {\r\n  return (\r\n    <ReactPaginate\r\n      previousLabel={<i className=\"fas fa-angle-left\" />}\r\n      nextLabel={<i className=\"fas fa-angle-right\" />}\r\n      breakLabel='...'\r\n      breakClassName={'page-item'}\r\n      breakLinkClassName={'page-link'}\r\n      pageCount={setting.totalPage}\r\n      forcePage={setting.selected}\r\n      marginPagesDisplayed={setting.marginPages || 1}\r\n      pageRangeDisplayed={setting.pageRange || 1}\r\n      onPageChange={handleClick}\r\n      containerClassName={'pagination pagination-md'}\r\n      subContainerClassName={'page-item'}\r\n      activeClassName={'active'}\r\n      pageLinkClassName={'page-link'}\r\n      pageClassName={'page-item'}\r\n      previousClassName={'page-item'}\r\n      nextClassName={'page-item'}\r\n      previousLinkClassName={'page-link'}\r\n      nextLinkClassName={'page-link'}\r\n      disabledClassName={'disabled'}\r\n    />\r\n  );\r\n}\r\n\r\nexport default PaginationBar;\r\n"],"sourceRoot":""}