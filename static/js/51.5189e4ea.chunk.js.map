{"version":3,"sources":["../node_modules/reactstrap/es/CardHeader.js","../node_modules/reactstrap/es/Table.js","../node_modules/svg.js/dist/svg.js"],"names":["_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_2__","react__WEBPACK_IMPORTED_MODULE_2___default","n","prop_types__WEBPACK_IMPORTED_MODULE_3__","prop_types__WEBPACK_IMPORTED_MODULE_3___default","classnames__WEBPACK_IMPORTED_MODULE_4__","classnames__WEBPACK_IMPORTED_MODULE_4___default","_utils__WEBPACK_IMPORTED_MODULE_5__","propTypes","tag","className","a","string","cssModule","object","CardHeader","props","Tag","attributes","Object","classes","createElement","defaultProps","__webpack_exports__","size","bordered","bool","borderless","striped","dark","hover","responsive","oneOfType","responsiveTag","innerRef","func","Table","ResponsiveTag","table","ref","responsiveClassName","__WEBPACK_AMD_DEFINE_RESULT__","root","window","this","undefined","document","SVG","element","supported","Doc","parser","draw","prepare","ns","xmlns","xlink","svgjs","createElementNS","createSVGRect","did","eid","name","capitalize","create","setAttribute","extend","modules","methods","key","i","slice","call","arguments","pop","length","prototype","Set","inherit","invent","config","initializer","constructor","construct","parent","Container","adopt","node","instance","nodeName","parentNode","SVGElement","Nested","Gradient","Element","type","namespace","defs","setData","JSON","parse","getAttribute","body","getElementsByTagName","documentElement","nested","style","attr","poly","polyline","path","native","addEventListener","regex","numberAndUnit","hex","rgb","reference","transforms","whitespace","isHex","isRgb","isCss","isBlank","isNumber","isPercent","isImage","delimiter","hyphen","pathLetters","isPathLetter","numbersWithDots","dots","utils","map","array","block","il","result","push","filter","radians","d","Math","PI","degrees","r","filterSVGElements","nodes","el","defaults","attrs","fill-opacity","stroke-opacity","stroke-width","stroke-linejoin","stroke-linecap","fill","stroke","opacity","x","y","cx","cy","width","height","rx","ry","offset","stop-opacity","stop-color","font-size","font-family","text-anchor","Color","color","match","g","b","test","exec","replace","parseInt","substring","join","toString","toHex","compToHex","toRgb","brightness","morph","destination","at","pos","isColor","Array","fallback","valueOf","value","lastValue","lastDestination","settle","seen","indexOf","isArray","split","trim","parseFloat","reverse","clone","array_clone","arr","PointArray","toLine","x1","y1","x2","y2","points","len","move","box","bbox","isNaN","getBBox","pathHandlers","M","c","p","p0","L","H","V","C","S","Q","T","Z","A","mlhvqtcsa","j","jl","toUpperCase","PathArray","s","arrayToString","l","equalCommands","pathArray","sourceArray","destinationArray","paramCnt","pathRegReplace","reduce","prev","curr","concat","Point","index","Number","unit","isFinite","toJSON","plus","number","minus","times","divide","to","relative","_stroke","_event","_events","dom","_x","_y","center","_width","_height","proportionalSize","writeDataToDom","assignNewId","cloneNode","add","after","remove","removeElement","addTo","put","putIn","id","_id","inside","show","hide","visible","hasClass","addClass","removeClass","toggleClass","get","matches","doc","parents","selector","matchesSelector","msMatchesSelector","mozMatchesSelector","webkitMatchesSelector","oMatchesSelector","_matches","svg","_svg","well","Parent","appendChild","innerHTML","firstChild","childNodes","each","lines","fn","removeAttribute","keys","stringify","o","is","obj","_is","easing","-","<>","cos",">","sin","<","from","MorphObj","Situation","init","reversed","reversing","duration","delay","start","Date","finish","ease","loop","loops","animations","styles","once","FX","_target","situations","active","situation","paused","lastPos","absPos","_speed","animate","queue","_delay","target","timeToAbsPos","timestamp","absPosToTime","startAnimFrame","stopAnimFrame","animationFrame","requestAnimationFrame","step","bind","cancelAnimationFrame","startCurrent","initAnimations","shift","dequeue","stop","source","initialTransformation","matrixify","clearQueue","clearCurrent","jumpToEnd","atEnd","reset","temp","atStart","isAbsPos","durDivSpd","speed","pause","last","play","progress","easeIt","on","wrapper","e","detail","off","_callStart","during","eased","afterAll","duringAll","method","args","ignoreTime","absPosInt","lastLoop","max","floor","Boolean","min","fire","fx","eachAt","self","apply","Matrix","multiply","undo","extract","matrix","isEased","setTimeout","_delay2","_speed2","real","v","_x2","G","transform","num","_y2","Text","_width2","_height2","plot","leading","viewbox","ViewBox","update","Stop","Box","left","top","fullBox","merge","m","xMin","Infinity","xMax","yMin","yMax","pts","forEach","BBox","contains","Exception","topParent","Shape","clientLeft","clientTop","clientWidth","clientHeight","tbox","console","warn","rbox","RBox","getBoundingClientRect","addOffset","pageXOffset","pageYOffset","screenCTM","inverse","base","arrayToMatrix","abcdef","px","deltaTransformPoint","py","skewX","atan2","f","transformedX","sqrt","transformedY","skewY","scaleX","scaleY","rotation","parseMatrix","translate","scale","around","rotate","flip","skew","tan","createSVGMatrix","float32String","ctm","getCTM","rect","getScreenCTM","point","createSVGPoint","matrixTransform","nodeValue","image","Image","pattern","setAttributeNS","rebuild","ensureCentre","Rotate","Scale","Skew","Translate","untransform","str","kv","toParent","pCtm","toDoc","Transformation","inversed","params","_undo","cssText","camelCase","children","insertBefore","has","first","deep","removeChild","clear","hasChildNodes","lastChild","_defs","ungroup","depth","Defs","flatten","view","we","he","wm","hm","reg","offsetWidth","offsetHeight","zoom","event","listenerId","events","listener","binding","options","bag","_svgjsListenerId","ev","removeEventListener","data","Event","dispatchEvent","CustomEvent","cancelable","_x3","_y3","gbox","trans","group","getElementById","version","spof","nextSibling","siblings","position","next","previous","forward","backward","front","back","before","Mask","targets","unmask","mask","maskWith","masker","ClipPath","unclip","clip","clipWith","clipper","gradient","fy","Pattern","patternUnits","Bare","words","text","createTextNode","_element","Symbol","symbol","Use","_element2","file","use","Rect","Circle","circle","_rx","_ry","Ellipse","ellipse","_rx2","_ry2","_x4","_y4","_width3","_height3","Line","line","Polyline","Polygon","polygon","_array","morphArray","_x5","_y5","_width4","_height4","Path","_x6","_y6","_width5","_height5","load","url","img","_loaded","ratio","_error","src","loaded","error","_rebuild","_build","_x7","_y7","oy","_text","nodeType","newLined","textContent","build","tspan","newLine","_size","textPath","blankLineOffset","dy","_text2","plain","Tspan","_text3","dx","_dx","_dy","t","getComputedTextLength","TextPath","track","_target2","link","linkTo","Marker","_width6","_height6","marker","_marker","sugar","prefix","toLowerCase","charAt","comp","w","h","abs","extension","dmove","radius","getTotalLength","pointAt","getPointAtLength","font","members","elements","splice","set","remember","k","memory","forget","_memory","idFromReference","select","query","querySelectorAll","CustomEventPoly","bubbles","createEvent","initCustomEvent","lastTime","vendors","callback","currTime","getTime","timeToCall","clearTimeout","factory","exports","module"],"mappings":"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","file":"static/js/51.5189e4ea.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar CardHeader = function CardHeader(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"tag\"]);\n\n  var classes = mapToCssModules(classNames(className, 'card-header'), cssModule);\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nCardHeader.propTypes = propTypes;\nCardHeader.defaultProps = defaultProps;\nexport default CardHeader;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  size: PropTypes.string,\n  bordered: PropTypes.bool,\n  borderless: PropTypes.bool,\n  striped: PropTypes.bool,\n  dark: PropTypes.bool,\n  hover: PropTypes.bool,\n  responsive: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n  tag: tagPropType,\n  responsiveTag: tagPropType,\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.string, PropTypes.object])\n};\nvar defaultProps = {\n  tag: 'table',\n  responsiveTag: 'div'\n};\n\nvar Table = function Table(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      size = props.size,\n      bordered = props.bordered,\n      borderless = props.borderless,\n      striped = props.striped,\n      dark = props.dark,\n      hover = props.hover,\n      responsive = props.responsive,\n      Tag = props.tag,\n      ResponsiveTag = props.responsiveTag,\n      innerRef = props.innerRef,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"size\", \"bordered\", \"borderless\", \"striped\", \"dark\", \"hover\", \"responsive\", \"tag\", \"responsiveTag\", \"innerRef\"]);\n\n  var classes = mapToCssModules(classNames(className, 'table', size ? 'table-' + size : false, bordered ? 'table-bordered' : false, borderless ? 'table-borderless' : false, striped ? 'table-striped' : false, dark ? 'table-dark' : false, hover ? 'table-hover' : false), cssModule);\n  var table = React.createElement(Tag, _extends({}, attributes, {\n    ref: innerRef,\n    className: classes\n  }));\n\n  if (responsive) {\n    var responsiveClassName = mapToCssModules(responsive === true ? 'table-responsive' : \"table-responsive-\" + responsive, cssModule);\n    return React.createElement(ResponsiveTag, {\n      className: responsiveClassName\n    }, table);\n  }\n\n  return table;\n};\n\nTable.propTypes = propTypes;\nTable.defaultProps = defaultProps;\nexport default Table;","/*!\n* svg.js - A lightweight library for manipulating and animating SVG.\n* @version 2.7.1\n* https://svgdotjs.github.io/\n*\n* @copyright Wout Fierens <wout@mick-wout.com>\n* @license MIT\n*\n* BUILT: Fri Nov 30 2018 10:01:55 GMT+0100 (GMT+01:00)\n*/\n;\n\n(function (root, factory) {\n  /* istanbul ignore next */\n  if (typeof define === 'function' && define.amd) {\n    define(function () {\n      return factory(root, root.document);\n    });\n  } else if (typeof exports === 'object') {\n    module.exports = root.document ? factory(root, root.document) : function (w) {\n      return factory(w, w.document);\n    };\n  } else {\n    root.SVG = factory(root, root.document);\n  }\n})(typeof window !== \"undefined\" ? window : this, function (window, document) {\n  // Find global reference - uses 'this' by default when available,\n  // falls back to 'window' otherwise (for bundlers like Webpack)\n  var globalRef = typeof this !== \"undefined\" ? this : window; // The main wrapping element\n\n  var SVG = globalRef.SVG = function (element) {\n    if (SVG.supported) {\n      element = new SVG.Doc(element);\n      if (!SVG.parser.draw) SVG.prepare();\n      return element;\n    }\n  }; // Default namespaces\n\n\n  SVG.ns = 'http://www.w3.org/2000/svg';\n  SVG.xmlns = 'http://www.w3.org/2000/xmlns/';\n  SVG.xlink = 'http://www.w3.org/1999/xlink';\n  SVG.svgjs = 'http://svgjs.com/svgjs'; // Svg support test\n\n  SVG.supported = function () {\n    return !!document.createElementNS && !!document.createElementNS(SVG.ns, 'svg').createSVGRect;\n  }(); // Don't bother to continue if SVG is not supported\n\n\n  if (!SVG.supported) return false; // Element id sequence\n\n  SVG.did = 1000; // Get next named element id\n\n  SVG.eid = function (name) {\n    return 'Svgjs' + capitalize(name) + SVG.did++;\n  }; // Method for element creation\n\n\n  SVG.create = function (name) {\n    // create element\n    var element = document.createElementNS(this.ns, name); // apply unique id\n\n    element.setAttribute('id', this.eid(name));\n    return element;\n  }; // Method for extending objects\n\n\n  SVG.extend = function () {\n    var modules, methods, key, i; // Get list of modules\n\n    modules = [].slice.call(arguments); // Get object with extensions\n\n    methods = modules.pop();\n\n    for (i = modules.length - 1; i >= 0; i--) {\n      if (modules[i]) for (key in methods) {\n        modules[i].prototype[key] = methods[key];\n      }\n    } // Make sure SVG.Set inherits any newly added methods\n\n\n    if (SVG.Set && SVG.Set.inherit) SVG.Set.inherit();\n  }; // Invent new element\n\n\n  SVG.invent = function (config) {\n    // Create element initializer\n    var initializer = typeof config.create == 'function' ? config.create : function () {\n      this.constructor.call(this, SVG.create(config.create));\n    }; // Inherit prototype\n\n    if (config.inherit) initializer.prototype = new config.inherit(); // Extend with methods\n\n    if (config.extend) SVG.extend(initializer, config.extend); // Attach construct method to parent\n\n    if (config.construct) SVG.extend(config.parent || SVG.Container, config.construct);\n    return initializer;\n  }; // Adopt existing svg elements\n\n\n  SVG.adopt = function (node) {\n    // check for presence of node\n    if (!node) return null; // make sure a node isn't already adopted\n\n    if (node.instance) return node.instance; // initialize variables\n\n    var element; // adopt with element-specific settings\n\n    if (node.nodeName == 'svg') element = node.parentNode instanceof window.SVGElement ? new SVG.Nested() : new SVG.Doc();else if (node.nodeName == 'linearGradient') element = new SVG.Gradient('linear');else if (node.nodeName == 'radialGradient') element = new SVG.Gradient('radial');else if (SVG[capitalize(node.nodeName)]) element = new SVG[capitalize(node.nodeName)]();else element = new SVG.Element(node); // ensure references\n\n    element.type = node.nodeName;\n    element.node = node;\n    node.instance = element; // SVG.Class specific preparations\n\n    if (element instanceof SVG.Doc) element.namespace().defs(); // pull svgjs data from the dom (getAttributeNS doesn't work in html5)\n\n    element.setData(JSON.parse(node.getAttribute('svgjs:data')) || {});\n    return element;\n  }; // Initialize parsing element\n\n\n  SVG.prepare = function () {\n    // Select document body and create invisible svg element\n    var body = document.getElementsByTagName('body')[0],\n        draw = (body ? new SVG.Doc(body) : SVG.adopt(document.documentElement).nested()).size(2, 0); // Create parser object\n\n    SVG.parser = {\n      body: body || document.documentElement,\n      draw: draw.style('opacity:0;position:absolute;left:-100%;top:-100%;overflow:hidden').attr('focusable', 'false').node,\n      poly: draw.polyline().node,\n      path: draw.path().node,\n      native: SVG.create('svg')\n    };\n  };\n\n  SVG.parser = {\n    native: SVG.create('svg')\n  };\n  document.addEventListener('DOMContentLoaded', function () {\n    if (!SVG.parser.draw) SVG.prepare();\n  }, false); // Storage for regular expressions\n\n  SVG.regex = {\n    // Parse unit value\n    numberAndUnit: /^([+-]?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?)([a-z%]*)$/i // Parse hex value\n    ,\n    hex: /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i // Parse rgb value\n    ,\n    rgb: /rgb\\((\\d+),(\\d+),(\\d+)\\)/ // Parse reference id\n    ,\n    reference: /#([a-z0-9\\-_]+)/i // splits a transformation chain\n    ,\n    transforms: /\\)\\s*,?\\s*/ // Whitespace\n    ,\n    whitespace: /\\s/g // Test hex value\n    ,\n    isHex: /^#[a-f0-9]{3,6}$/i // Test rgb value\n    ,\n    isRgb: /^rgb\\(/ // Test css declaration\n    ,\n    isCss: /[^:]+:[^;]+;?/ // Test for blank string\n    ,\n    isBlank: /^(\\s+)?$/ // Test for numeric string\n    ,\n    isNumber: /^[+-]?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i // Test for percent value\n    ,\n    isPercent: /^-?[\\d\\.]+%$/ // Test for image url\n    ,\n    isImage: /\\.(jpg|jpeg|png|gif|svg)(\\?[^=]+.*)?/i // split at whitespace and comma\n    ,\n    delimiter: /[\\s,]+/ // The following regex are used to parse the d attribute of a path\n    // Matches all hyphens which are not after an exponent\n    ,\n    hyphen: /([^e])\\-/gi // Replaces and tests for all path letters\n    ,\n    pathLetters: /[MLHVCSQTAZ]/gi // yes we need this one, too\n    ,\n    isPathLetter: /[MLHVCSQTAZ]/i // matches 0.154.23.45\n    ,\n    numbersWithDots: /((\\d?\\.\\d+(?:e[+-]?\\d+)?)((?:\\.\\d+(?:e[+-]?\\d+)?)+))+/gi // matches .\n    ,\n    dots: /\\./g\n  };\n  SVG.utils = {\n    // Map function\n    map: function map(array, block) {\n      var i,\n          il = array.length,\n          result = [];\n\n      for (i = 0; i < il; i++) {\n        result.push(block(array[i]));\n      }\n\n      return result;\n    } // Filter function\n    ,\n    filter: function filter(array, block) {\n      var i,\n          il = array.length,\n          result = [];\n\n      for (i = 0; i < il; i++) {\n        if (block(array[i])) result.push(array[i]);\n      }\n\n      return result;\n    } // Degrees to radians\n    ,\n    radians: function radians(d) {\n      return d % 360 * Math.PI / 180;\n    } // Radians to degrees\n    ,\n    degrees: function degrees(r) {\n      return r * 180 / Math.PI % 360;\n    },\n    filterSVGElements: function filterSVGElements(nodes) {\n      return this.filter(nodes, function (el) {\n        return el instanceof window.SVGElement;\n      });\n    }\n  };\n  SVG.defaults = {\n    // Default attribute values\n    attrs: {\n      // fill and stroke\n      'fill-opacity': 1,\n      'stroke-opacity': 1,\n      'stroke-width': 0,\n      'stroke-linejoin': 'miter',\n      'stroke-linecap': 'butt',\n      fill: '#000000',\n      stroke: '#000000',\n      opacity: 1 // position\n      ,\n      x: 0,\n      y: 0,\n      cx: 0,\n      cy: 0 // size\n      ,\n      width: 0,\n      height: 0 // radius\n      ,\n      r: 0,\n      rx: 0,\n      ry: 0 // gradient\n      ,\n      offset: 0,\n      'stop-opacity': 1,\n      'stop-color': '#000000' // text\n      ,\n      'font-size': 16,\n      'font-family': 'Helvetica, Arial, sans-serif',\n      'text-anchor': 'start'\n    }\n  }; // Module for color convertions\n\n  SVG.Color = function (color) {\n    var match; // initialize defaults\n\n    this.r = 0;\n    this.g = 0;\n    this.b = 0;\n    if (!color) return; // parse color\n\n    if (typeof color === 'string') {\n      if (SVG.regex.isRgb.test(color)) {\n        // get rgb values\n        match = SVG.regex.rgb.exec(color.replace(SVG.regex.whitespace, '')); // parse numeric values\n\n        this.r = parseInt(match[1]);\n        this.g = parseInt(match[2]);\n        this.b = parseInt(match[3]);\n      } else if (SVG.regex.isHex.test(color)) {\n        // get hex values\n        match = SVG.regex.hex.exec(fullHex(color)); // parse numeric values\n\n        this.r = parseInt(match[1], 16);\n        this.g = parseInt(match[2], 16);\n        this.b = parseInt(match[3], 16);\n      }\n    } else if (typeof color === 'object') {\n      this.r = color.r;\n      this.g = color.g;\n      this.b = color.b;\n    }\n  };\n\n  SVG.extend(SVG.Color, {\n    // Default to hex conversion\n    toString: function toString() {\n      return this.toHex();\n    } // Build hex value\n    ,\n    toHex: function toHex() {\n      return '#' + compToHex(this.r) + compToHex(this.g) + compToHex(this.b);\n    } // Build rgb value\n    ,\n    toRgb: function toRgb() {\n      return 'rgb(' + [this.r, this.g, this.b].join() + ')';\n    } // Calculate true brightness\n    ,\n    brightness: function brightness() {\n      return this.r / 255 * 0.30 + this.g / 255 * 0.59 + this.b / 255 * 0.11;\n    } // Make color morphable\n    ,\n    morph: function morph(color) {\n      this.destination = new SVG.Color(color);\n      return this;\n    } // Get morphed color at given position\n    ,\n    at: function at(pos) {\n      // make sure a destination is defined\n      if (!this.destination) return this; // normalise pos\n\n      pos = pos < 0 ? 0 : pos > 1 ? 1 : pos; // generate morphed color\n\n      return new SVG.Color({\n        r: ~~(this.r + (this.destination.r - this.r) * pos),\n        g: ~~(this.g + (this.destination.g - this.g) * pos),\n        b: ~~(this.b + (this.destination.b - this.b) * pos)\n      });\n    }\n  }); // Testers\n  // Test if given value is a color string\n\n  SVG.Color.test = function (color) {\n    color += '';\n    return SVG.regex.isHex.test(color) || SVG.regex.isRgb.test(color);\n  }; // Test if given value is a rgb object\n\n\n  SVG.Color.isRgb = function (color) {\n    return color && typeof color.r == 'number' && typeof color.g == 'number' && typeof color.b == 'number';\n  }; // Test if given value is a color\n\n\n  SVG.Color.isColor = function (color) {\n    return SVG.Color.isRgb(color) || SVG.Color.test(color);\n  }; // Module for array conversion\n\n\n  SVG.Array = function (array, fallback) {\n    array = (array || []).valueOf(); // if array is empty and fallback is provided, use fallback\n\n    if (array.length == 0 && fallback) array = fallback.valueOf(); // parse array\n\n    this.value = this.parse(array);\n  };\n\n  SVG.extend(SVG.Array, {\n    // Make array morphable\n    morph: function morph(array) {\n      this.destination = this.parse(array); // normalize length of arrays\n\n      if (this.value.length != this.destination.length) {\n        var lastValue = this.value[this.value.length - 1],\n            lastDestination = this.destination[this.destination.length - 1];\n\n        while (this.value.length > this.destination.length) {\n          this.destination.push(lastDestination);\n        }\n\n        while (this.value.length < this.destination.length) {\n          this.value.push(lastValue);\n        }\n      }\n\n      return this;\n    } // Clean up any duplicate points\n    ,\n    settle: function settle() {\n      // find all unique values\n      for (var i = 0, il = this.value.length, seen = []; i < il; i++) {\n        if (seen.indexOf(this.value[i]) == -1) seen.push(this.value[i]);\n      } // set new value\n\n\n      return this.value = seen;\n    } // Get morphed array at given position\n    ,\n    at: function at(pos) {\n      // make sure a destination is defined\n      if (!this.destination) return this; // generate morphed array\n\n      for (var i = 0, il = this.value.length, array = []; i < il; i++) {\n        array.push(this.value[i] + (this.destination[i] - this.value[i]) * pos);\n      }\n\n      return new SVG.Array(array);\n    } // Convert array to string\n    ,\n    toString: function toString() {\n      return this.value.join(' ');\n    } // Real value\n    ,\n    valueOf: function valueOf() {\n      return this.value;\n    } // Parse whitespace separated string\n    ,\n    parse: function parse(array) {\n      array = array.valueOf(); // if already is an array, no need to parse it\n\n      if (Array.isArray(array)) return array;\n      return this.split(array);\n    } // Strip unnecessary whitespace\n    ,\n    split: function split(string) {\n      return string.trim().split(SVG.regex.delimiter).map(parseFloat);\n    } // Reverse array\n    ,\n    reverse: function reverse() {\n      this.value.reverse();\n      return this;\n    },\n    clone: function clone() {\n      var clone = new this.constructor();\n      clone.value = array_clone(this.value);\n      return clone;\n    }\n  }); // Poly points array\n\n  SVG.PointArray = function (array, fallback) {\n    SVG.Array.call(this, array, fallback || [[0, 0]]);\n  }; // Inherit from SVG.Array\n\n\n  SVG.PointArray.prototype = new SVG.Array();\n  SVG.PointArray.prototype.constructor = SVG.PointArray;\n  SVG.extend(SVG.PointArray, {\n    // Convert array to string\n    toString: function toString() {\n      // convert to a poly point string\n      for (var i = 0, il = this.value.length, array = []; i < il; i++) {\n        array.push(this.value[i].join(','));\n      }\n\n      return array.join(' ');\n    } // Convert array to line object\n    ,\n    toLine: function toLine() {\n      return {\n        x1: this.value[0][0],\n        y1: this.value[0][1],\n        x2: this.value[1][0],\n        y2: this.value[1][1]\n      };\n    } // Get morphed array at given position\n    ,\n    at: function at(pos) {\n      // make sure a destination is defined\n      if (!this.destination) return this; // generate morphed point string\n\n      for (var i = 0, il = this.value.length, array = []; i < il; i++) {\n        array.push([this.value[i][0] + (this.destination[i][0] - this.value[i][0]) * pos, this.value[i][1] + (this.destination[i][1] - this.value[i][1]) * pos]);\n      }\n\n      return new SVG.PointArray(array);\n    } // Parse point string and flat array\n    ,\n    parse: function parse(array) {\n      var points = [];\n      array = array.valueOf(); // if it is an array\n\n      if (Array.isArray(array)) {\n        // and it is not flat, there is no need to parse it\n        if (Array.isArray(array[0])) {\n          // make sure to use a clone\n          return array.map(function (el) {\n            return el.slice();\n          });\n        } else if (array[0].x != null) {\n          // allow point objects to be passed\n          return array.map(function (el) {\n            return [el.x, el.y];\n          });\n        }\n      } else {\n        // Else, it is considered as a string\n        // parse points\n        array = array.trim().split(SVG.regex.delimiter).map(parseFloat);\n      } // validate points - https://svgwg.org/svg2-draft/shapes.html#DataTypePoints\n      // Odd number of coordinates is an error. In such cases, drop the last odd coordinate.\n\n\n      if (array.length % 2 !== 0) array.pop(); // wrap points in two-tuples and parse points as floats\n\n      for (var i = 0, len = array.length; i < len; i = i + 2) {\n        points.push([array[i], array[i + 1]]);\n      }\n\n      return points;\n    } // Move point string\n    ,\n    move: function move(x, y) {\n      var box = this.bbox(); // get relative offset\n\n      x -= box.x;\n      y -= box.y; // move every point\n\n      if (!isNaN(x) && !isNaN(y)) for (var i = this.value.length - 1; i >= 0; i--) {\n        this.value[i] = [this.value[i][0] + x, this.value[i][1] + y];\n      }\n      return this;\n    } // Resize poly string\n    ,\n    size: function size(width, height) {\n      var i,\n          box = this.bbox(); // recalculate position of all points according to new size\n\n      for (i = this.value.length - 1; i >= 0; i--) {\n        if (box.width) this.value[i][0] = (this.value[i][0] - box.x) * width / box.width + box.x;\n        if (box.height) this.value[i][1] = (this.value[i][1] - box.y) * height / box.height + box.y;\n      }\n\n      return this;\n    } // Get bounding box of points\n    ,\n    bbox: function bbox() {\n      SVG.parser.poly.setAttribute('points', this.toString());\n      return SVG.parser.poly.getBBox();\n    }\n  });\n  var pathHandlers = {\n    M: function M(c, p, p0) {\n      p.x = p0.x = c[0];\n      p.y = p0.y = c[1];\n      return ['M', p.x, p.y];\n    },\n    L: function L(c, p) {\n      p.x = c[0];\n      p.y = c[1];\n      return ['L', c[0], c[1]];\n    },\n    H: function H(c, p) {\n      p.x = c[0];\n      return ['H', c[0]];\n    },\n    V: function V(c, p) {\n      p.y = c[0];\n      return ['V', c[0]];\n    },\n    C: function C(c, p) {\n      p.x = c[4];\n      p.y = c[5];\n      return ['C', c[0], c[1], c[2], c[3], c[4], c[5]];\n    },\n    S: function S(c, p) {\n      p.x = c[2];\n      p.y = c[3];\n      return ['S', c[0], c[1], c[2], c[3]];\n    },\n    Q: function Q(c, p) {\n      p.x = c[2];\n      p.y = c[3];\n      return ['Q', c[0], c[1], c[2], c[3]];\n    },\n    T: function T(c, p) {\n      p.x = c[0];\n      p.y = c[1];\n      return ['T', c[0], c[1]];\n    },\n    Z: function Z(c, p, p0) {\n      p.x = p0.x;\n      p.y = p0.y;\n      return ['Z'];\n    },\n    A: function A(c, p) {\n      p.x = c[5];\n      p.y = c[6];\n      return ['A', c[0], c[1], c[2], c[3], c[4], c[5], c[6]];\n    }\n  };\n  var mlhvqtcsa = 'mlhvqtcsaz'.split('');\n\n  for (var i = 0, il = mlhvqtcsa.length; i < il; ++i) {\n    pathHandlers[mlhvqtcsa[i]] = function (i) {\n      return function (c, p, p0) {\n        if (i == 'H') c[0] = c[0] + p.x;else if (i == 'V') c[0] = c[0] + p.y;else if (i == 'A') {\n          c[5] = c[5] + p.x, c[6] = c[6] + p.y;\n        } else for (var j = 0, jl = c.length; j < jl; ++j) {\n          c[j] = c[j] + (j % 2 ? p.y : p.x);\n        }\n        return pathHandlers[i](c, p, p0);\n      };\n    }(mlhvqtcsa[i].toUpperCase());\n  } // Path points array\n\n\n  SVG.PathArray = function (array, fallback) {\n    SVG.Array.call(this, array, fallback || [['M', 0, 0]]);\n  }; // Inherit from SVG.Array\n\n\n  SVG.PathArray.prototype = new SVG.Array();\n  SVG.PathArray.prototype.constructor = SVG.PathArray;\n  SVG.extend(SVG.PathArray, {\n    // Convert array to string\n    toString: function toString() {\n      return arrayToString(this.value);\n    } // Move path string\n    ,\n    move: function move(x, y) {\n      // get bounding box of current situation\n      var box = this.bbox(); // get relative offset\n\n      x -= box.x;\n      y -= box.y;\n\n      if (!isNaN(x) && !isNaN(y)) {\n        // move every point\n        for (var l, i = this.value.length - 1; i >= 0; i--) {\n          l = this.value[i][0];\n\n          if (l == 'M' || l == 'L' || l == 'T') {\n            this.value[i][1] += x;\n            this.value[i][2] += y;\n          } else if (l == 'H') {\n            this.value[i][1] += x;\n          } else if (l == 'V') {\n            this.value[i][1] += y;\n          } else if (l == 'C' || l == 'S' || l == 'Q') {\n            this.value[i][1] += x;\n            this.value[i][2] += y;\n            this.value[i][3] += x;\n            this.value[i][4] += y;\n\n            if (l == 'C') {\n              this.value[i][5] += x;\n              this.value[i][6] += y;\n            }\n          } else if (l == 'A') {\n            this.value[i][6] += x;\n            this.value[i][7] += y;\n          }\n        }\n      }\n\n      return this;\n    } // Resize path string\n    ,\n    size: function size(width, height) {\n      // get bounding box of current situation\n      var i,\n          l,\n          box = this.bbox(); // recalculate position of all points according to new size\n\n      for (i = this.value.length - 1; i >= 0; i--) {\n        l = this.value[i][0];\n\n        if (l == 'M' || l == 'L' || l == 'T') {\n          this.value[i][1] = (this.value[i][1] - box.x) * width / box.width + box.x;\n          this.value[i][2] = (this.value[i][2] - box.y) * height / box.height + box.y;\n        } else if (l == 'H') {\n          this.value[i][1] = (this.value[i][1] - box.x) * width / box.width + box.x;\n        } else if (l == 'V') {\n          this.value[i][1] = (this.value[i][1] - box.y) * height / box.height + box.y;\n        } else if (l == 'C' || l == 'S' || l == 'Q') {\n          this.value[i][1] = (this.value[i][1] - box.x) * width / box.width + box.x;\n          this.value[i][2] = (this.value[i][2] - box.y) * height / box.height + box.y;\n          this.value[i][3] = (this.value[i][3] - box.x) * width / box.width + box.x;\n          this.value[i][4] = (this.value[i][4] - box.y) * height / box.height + box.y;\n\n          if (l == 'C') {\n            this.value[i][5] = (this.value[i][5] - box.x) * width / box.width + box.x;\n            this.value[i][6] = (this.value[i][6] - box.y) * height / box.height + box.y;\n          }\n        } else if (l == 'A') {\n          // resize radii\n          this.value[i][1] = this.value[i][1] * width / box.width;\n          this.value[i][2] = this.value[i][2] * height / box.height; // move position values\n\n          this.value[i][6] = (this.value[i][6] - box.x) * width / box.width + box.x;\n          this.value[i][7] = (this.value[i][7] - box.y) * height / box.height + box.y;\n        }\n      }\n\n      return this;\n    } // Test if the passed path array use the same path data commands as this path array\n    ,\n    equalCommands: function equalCommands(pathArray) {\n      var i, il, equalCommands;\n      pathArray = new SVG.PathArray(pathArray);\n      equalCommands = this.value.length === pathArray.value.length;\n\n      for (i = 0, il = this.value.length; equalCommands && i < il; i++) {\n        equalCommands = this.value[i][0] === pathArray.value[i][0];\n      }\n\n      return equalCommands;\n    } // Make path array morphable\n    ,\n    morph: function morph(pathArray) {\n      pathArray = new SVG.PathArray(pathArray);\n\n      if (this.equalCommands(pathArray)) {\n        this.destination = pathArray;\n      } else {\n        this.destination = null;\n      }\n\n      return this;\n    } // Get morphed path array at given position\n    ,\n    at: function at(pos) {\n      // make sure a destination is defined\n      if (!this.destination) return this;\n      var sourceArray = this.value,\n          destinationArray = this.destination.value,\n          array = [],\n          pathArray = new SVG.PathArray(),\n          i,\n          il,\n          j,\n          jl; // Animate has specified in the SVG spec\n      // See: https://www.w3.org/TR/SVG11/paths.html#PathElement\n\n      for (i = 0, il = sourceArray.length; i < il; i++) {\n        array[i] = [sourceArray[i][0]];\n\n        for (j = 1, jl = sourceArray[i].length; j < jl; j++) {\n          array[i][j] = sourceArray[i][j] + (destinationArray[i][j] - sourceArray[i][j]) * pos;\n        } // For the two flags of the elliptical arc command, the SVG spec say:\n        // Flags and booleans are interpolated as fractions between zero and one, with any non-zero value considered to be a value of one/true\n        // Elliptical arc command as an array followed by corresponding indexes:\n        // ['A', rx, ry, x-axis-rotation, large-arc-flag, sweep-flag, x, y]\n        //   0    1   2        3                 4             5      6  7\n\n\n        if (array[i][0] === 'A') {\n          array[i][4] = +(array[i][4] != 0);\n          array[i][5] = +(array[i][5] != 0);\n        }\n      } // Directly modify the value of a path array, this is done this way for performance\n\n\n      pathArray.value = array;\n      return pathArray;\n    } // Absolutize and parse path to array\n    ,\n    parse: function parse(array) {\n      // if it's already a patharray, no need to parse it\n      if (array instanceof SVG.PathArray) return array.valueOf(); // prepare for parsing\n\n      var i,\n          x0,\n          y0,\n          s,\n          seg,\n          arr,\n          x = 0,\n          y = 0,\n          paramCnt = {\n        'M': 2,\n        'L': 2,\n        'H': 1,\n        'V': 1,\n        'C': 6,\n        'S': 4,\n        'Q': 4,\n        'T': 2,\n        'A': 7,\n        'Z': 0\n      };\n\n      if (typeof array == 'string') {\n        array = array.replace(SVG.regex.numbersWithDots, pathRegReplace) // convert 45.123.123 to 45.123 .123\n        .replace(SVG.regex.pathLetters, ' $& ') // put some room between letters and numbers\n        .replace(SVG.regex.hyphen, '$1 -') // add space before hyphen\n        .trim() // trim\n        .split(SVG.regex.delimiter); // split into array\n      } else {\n        array = array.reduce(function (prev, curr) {\n          return [].concat.call(prev, curr);\n        }, []);\n      } // array now is an array containing all parts of a path e.g. ['M', '0', '0', 'L', '30', '30' ...]\n\n\n      var arr = [],\n          p = new SVG.Point(),\n          p0 = new SVG.Point(),\n          index = 0,\n          len = array.length;\n\n      do {\n        // Test if we have a path letter\n        if (SVG.regex.isPathLetter.test(array[index])) {\n          s = array[index];\n          ++index; // If last letter was a move command and we got no new, it defaults to [L]ine\n        } else if (s == 'M') {\n          s = 'L';\n        } else if (s == 'm') {\n          s = 'l';\n        }\n\n        arr.push(pathHandlers[s].call(null, array.slice(index, index = index + paramCnt[s.toUpperCase()]).map(parseFloat), p, p0));\n      } while (len > index);\n\n      return arr;\n    } // Get bounding box of path\n    ,\n    bbox: function bbox() {\n      SVG.parser.path.setAttribute('d', this.toString());\n      return SVG.parser.path.getBBox();\n    }\n  }); // Module for unit convertions\n\n  SVG.Number = SVG.invent({\n    // Initialize\n    create: function create(value, unit) {\n      // initialize defaults\n      this.value = 0;\n      this.unit = unit || ''; // parse value\n\n      if (typeof value === 'number') {\n        // ensure a valid numeric value\n        this.value = isNaN(value) ? 0 : !isFinite(value) ? value < 0 ? -3.4e+38 : +3.4e+38 : value;\n      } else if (typeof value === 'string') {\n        unit = value.match(SVG.regex.numberAndUnit);\n\n        if (unit) {\n          // make value numeric\n          this.value = parseFloat(unit[1]); // normalize\n\n          if (unit[5] == '%') this.value /= 100;else if (unit[5] == 's') this.value *= 1000; // store unit\n\n          this.unit = unit[5];\n        }\n      } else {\n        if (value instanceof SVG.Number) {\n          this.value = value.valueOf();\n          this.unit = value.unit;\n        }\n      }\n    } // Add methods\n    ,\n    extend: {\n      // Stringalize\n      toString: function toString() {\n        return (this.unit == '%' ? ~~(this.value * 1e8) / 1e6 : this.unit == 's' ? this.value / 1e3 : this.value) + this.unit;\n      },\n      toJSON: function toJSON() {\n        return this.toString();\n      },\n      // Convert to primitive\n      valueOf: function valueOf() {\n        return this.value;\n      } // Add number\n      ,\n      plus: function plus(number) {\n        number = new SVG.Number(number);\n        return new SVG.Number(this + number, this.unit || number.unit);\n      } // Subtract number\n      ,\n      minus: function minus(number) {\n        number = new SVG.Number(number);\n        return new SVG.Number(this - number, this.unit || number.unit);\n      } // Multiply number\n      ,\n      times: function times(number) {\n        number = new SVG.Number(number);\n        return new SVG.Number(this * number, this.unit || number.unit);\n      } // Divide number\n      ,\n      divide: function divide(number) {\n        number = new SVG.Number(number);\n        return new SVG.Number(this / number, this.unit || number.unit);\n      } // Convert to different unit\n      ,\n      to: function to(unit) {\n        var number = new SVG.Number(this);\n        if (typeof unit === 'string') number.unit = unit;\n        return number;\n      } // Make number morphable\n      ,\n      morph: function morph(number) {\n        this.destination = new SVG.Number(number);\n\n        if (number.relative) {\n          this.destination.value += this.value;\n        }\n\n        return this;\n      } // Get morphed number at given position\n      ,\n      at: function at(pos) {\n        // Make sure a destination is defined\n        if (!this.destination) return this; // Generate new morphed number\n\n        return new SVG.Number(this.destination).minus(this).times(pos).plus(this);\n      }\n    }\n  });\n  SVG.Element = SVG.invent({\n    // Initialize node\n    create: function create(node) {\n      // make stroke value accessible dynamically\n      this._stroke = SVG.defaults.attrs.stroke;\n      this._event = null;\n      this._events = {}; // initialize data object\n\n      this.dom = {}; // create circular reference\n\n      if (this.node = node) {\n        this.type = node.nodeName;\n        this.node.instance = this;\n        this._events = node._events || {}; // store current attribute value\n\n        this._stroke = node.getAttribute('stroke') || this._stroke;\n      }\n    } // Add class methods\n    ,\n    extend: {\n      // Move over x-axis\n      x: function x(_x) {\n        return this.attr('x', _x);\n      } // Move over y-axis\n      ,\n      y: function y(_y) {\n        return this.attr('y', _y);\n      } // Move by center over x-axis\n      ,\n      cx: function cx(x) {\n        return x == null ? this.x() + this.width() / 2 : this.x(x - this.width() / 2);\n      } // Move by center over y-axis\n      ,\n      cy: function cy(y) {\n        return y == null ? this.y() + this.height() / 2 : this.y(y - this.height() / 2);\n      } // Move element to given x and y values\n      ,\n      move: function move(x, y) {\n        return this.x(x).y(y);\n      } // Move element by its center\n      ,\n      center: function center(x, y) {\n        return this.cx(x).cy(y);\n      } // Set width of element\n      ,\n      width: function width(_width) {\n        return this.attr('width', _width);\n      } // Set height of element\n      ,\n      height: function height(_height) {\n        return this.attr('height', _height);\n      } // Set element size to given width and height\n      ,\n      size: function size(width, height) {\n        var p = proportionalSize(this, width, height);\n        return this.width(new SVG.Number(p.width)).height(new SVG.Number(p.height));\n      } // Clone element\n      ,\n      clone: function clone(parent) {\n        // write dom data to the dom so the clone can pickup the data\n        this.writeDataToDom(); // clone element and assign new id\n\n        var clone = assignNewId(this.node.cloneNode(true)); // insert the clone in the given parent or after myself\n\n        if (parent) parent.add(clone);else this.after(clone);\n        return clone;\n      } // Remove element\n      ,\n      remove: function remove() {\n        if (this.parent()) this.parent().removeElement(this);\n        return this;\n      } // Replace element\n      ,\n      replace: function replace(element) {\n        this.after(element).remove();\n        return element;\n      } // Add element to given container and return self\n      ,\n      addTo: function addTo(parent) {\n        return parent.put(this);\n      } // Add element to given container and return container\n      ,\n      putIn: function putIn(parent) {\n        return parent.add(this);\n      } // Get / set id\n      ,\n      id: function id(_id) {\n        return this.attr('id', _id);\n      } // Checks whether the given point inside the bounding box of the element\n      ,\n      inside: function inside(x, y) {\n        var box = this.bbox();\n        return x > box.x && y > box.y && x < box.x + box.width && y < box.y + box.height;\n      } // Show element\n      ,\n      show: function show() {\n        return this.style('display', '');\n      } // Hide element\n      ,\n      hide: function hide() {\n        return this.style('display', 'none');\n      } // Is element visible?\n      ,\n      visible: function visible() {\n        return this.style('display') != 'none';\n      } // Return id on string conversion\n      ,\n      toString: function toString() {\n        return this.attr('id');\n      } // Return array of classes on the node\n      ,\n      classes: function classes() {\n        var attr = this.attr('class');\n        return attr == null ? [] : attr.trim().split(SVG.regex.delimiter);\n      } // Return true if class exists on the node, false otherwise\n      ,\n      hasClass: function hasClass(name) {\n        return this.classes().indexOf(name) != -1;\n      } // Add class to the node\n      ,\n      addClass: function addClass(name) {\n        if (!this.hasClass(name)) {\n          var array = this.classes();\n          array.push(name);\n          this.attr('class', array.join(' '));\n        }\n\n        return this;\n      } // Remove class from the node\n      ,\n      removeClass: function removeClass(name) {\n        if (this.hasClass(name)) {\n          this.attr('class', this.classes().filter(function (c) {\n            return c != name;\n          }).join(' '));\n        }\n\n        return this;\n      } // Toggle the presence of a class on the node\n      ,\n      toggleClass: function toggleClass(name) {\n        return this.hasClass(name) ? this.removeClass(name) : this.addClass(name);\n      } // Get referenced element form attribute value\n      ,\n      reference: function reference(attr) {\n        return SVG.get(this.attr(attr));\n      } // Returns the parent element instance\n      ,\n      parent: function parent(type) {\n        var parent = this; // check for parent\n\n        if (!parent.node.parentNode) return null; // get parent element\n\n        parent = SVG.adopt(parent.node.parentNode);\n        if (!type) return parent; // loop trough ancestors if type is given\n\n        while (parent && parent.node instanceof window.SVGElement) {\n          if (typeof type === 'string' ? parent.matches(type) : parent instanceof type) return parent;\n          if (!parent.node.parentNode || parent.node.parentNode.nodeName == '#document' || parent.node.parentNode.nodeName == '#document-fragment') return null; // #759, #720\n\n          parent = SVG.adopt(parent.node.parentNode);\n        }\n      } // Get parent document\n      ,\n      doc: function doc() {\n        return this instanceof SVG.Doc ? this : this.parent(SVG.Doc);\n      } // return array of all ancestors of given type up to the root svg\n      ,\n      parents: function parents(type) {\n        var parents = [],\n            parent = this;\n\n        do {\n          parent = parent.parent(type);\n          if (!parent || !parent.node) break;\n          parents.push(parent);\n        } while (parent.parent);\n\n        return parents;\n      } // matches the element vs a css selector\n      ,\n      matches: function matches(selector) {\n        return _matches(this.node, selector);\n      } // Returns the svg node to call native svg methods on it\n      ,\n      native: function native() {\n        return this.node;\n      } // Import raw svg\n      ,\n      svg: function svg(_svg) {\n        // create temporary holder\n        var well = document.createElement('svg'); // act as a setter if svg is given\n\n        if (_svg && this instanceof SVG.Parent) {\n          // dump raw svg\n          well.innerHTML = '<svg>' + _svg.replace(/\\n/, '').replace(/<([\\w:-]+)([^<]+?)\\/>/g, '<$1$2></$1>') + '</svg>'; // transplant nodes\n\n          for (var i = 0, il = well.firstChild.childNodes.length; i < il; i++) {\n            this.node.appendChild(well.firstChild.firstChild);\n          } // otherwise act as a getter\n\n        } else {\n          // create a wrapping svg element in case of partial content\n          well.appendChild(_svg = document.createElement('svg')); // write svgjs data to the dom\n\n          this.writeDataToDom(); // insert a copy of this node\n\n          _svg.appendChild(this.node.cloneNode(true)); // return target element\n\n\n          return well.innerHTML.replace(/^<svg>/, '').replace(/<\\/svg>$/, '');\n        }\n\n        return this;\n      } // write svgjs data to the dom\n      ,\n      writeDataToDom: function writeDataToDom() {\n        // dump variables recursively\n        if (this.each || this.lines) {\n          var fn = this.each ? this : this.lines();\n          fn.each(function () {\n            this.writeDataToDom();\n          });\n        } // remove previously set data\n\n\n        this.node.removeAttribute('svgjs:data');\n        if (Object.keys(this.dom).length) this.node.setAttribute('svgjs:data', JSON.stringify(this.dom)); // see #428\n\n        return this;\n      } // set given data to the elements data property\n      ,\n      setData: function setData(o) {\n        this.dom = o;\n        return this;\n      },\n      is: function is(obj) {\n        return _is(this, obj);\n      }\n    }\n  });\n  SVG.easing = {\n    '-': function _(pos) {\n      return pos;\n    },\n    '<>': function _(pos) {\n      return -Math.cos(pos * Math.PI) / 2 + 0.5;\n    },\n    '>': function _(pos) {\n      return Math.sin(pos * Math.PI / 2);\n    },\n    '<': function _(pos) {\n      return -Math.cos(pos * Math.PI / 2) + 1;\n    }\n  };\n\n  SVG.morph = function (pos) {\n    return function (from, to) {\n      return new SVG.MorphObj(from, to).at(pos);\n    };\n  };\n\n  SVG.Situation = SVG.invent({\n    create: function create(o) {\n      this.init = false;\n      this.reversed = false;\n      this.reversing = false;\n      this.duration = new SVG.Number(o.duration).valueOf();\n      this.delay = new SVG.Number(o.delay).valueOf();\n      this.start = +new Date() + this.delay;\n      this.finish = this.start + this.duration;\n      this.ease = o.ease; // this.loop is incremented from 0 to this.loops\n      // it is also incremented when in an infinite loop (when this.loops is true)\n\n      this.loop = 0;\n      this.loops = false;\n      this.animations = {// functionToCall: [list of morphable objects]\n        // e.g. move: [SVG.Number, SVG.Number]\n      };\n      this.attrs = {// holds all attributes which are not represented from a function svg.js provides\n        // e.g. someAttr: SVG.Number\n      };\n      this.styles = {// holds all styles which should be animated\n        // e.g. fill-color: SVG.Color\n      };\n      this.transforms = [// holds all transformations as transformation objects\n        // e.g. [SVG.Rotate, SVG.Translate, SVG.Matrix]\n      ];\n      this.once = {// functions to fire at a specific position\n        // e.g. \"0.5\": function foo(){}\n      };\n    }\n  });\n  SVG.FX = SVG.invent({\n    create: function create(element) {\n      this._target = element;\n      this.situations = [];\n      this.active = false;\n      this.situation = null;\n      this.paused = false;\n      this.lastPos = 0;\n      this.pos = 0; // The absolute position of an animation is its position in the context of its complete duration (including delay and loops)\n      // When performing a delay, absPos is below 0 and when performing a loop, its value is above 1\n\n      this.absPos = 0;\n      this._speed = 1;\n    },\n    extend: {\n      /**\r\n       * sets or returns the target of this animation\r\n       * @param o object || number In case of Object it holds all parameters. In case of number its the duration of the animation\r\n       * @param ease function || string Function which should be used for easing or easing keyword\r\n       * @param delay Number indicating the delay before the animation starts\r\n       * @return target || this\r\n       */\n      animate: function animate(o, ease, delay) {\n        if (typeof o == 'object') {\n          ease = o.ease;\n          delay = o.delay;\n          o = o.duration;\n        }\n\n        var situation = new SVG.Situation({\n          duration: o || 1000,\n          delay: delay || 0,\n          ease: SVG.easing[ease || '-'] || ease\n        });\n        this.queue(situation);\n        return this;\n      }\n      /**\r\n       * sets a delay before the next element of the queue is called\r\n       * @param delay Duration of delay in milliseconds\r\n       * @return this.target()\r\n       */\n      ,\n      delay: function delay(_delay) {\n        // The delay is performed by an empty situation with its duration\n        // attribute set to the duration of the delay\n        var situation = new SVG.Situation({\n          duration: _delay,\n          delay: 0,\n          ease: SVG.easing['-']\n        });\n        return this.queue(situation);\n      }\n      /**\r\n       * sets or returns the target of this animation\r\n       * @param null || target SVG.Element which should be set as new target\r\n       * @return target || this\r\n       */\n      ,\n      target: function target(_target) {\n        if (_target && _target instanceof SVG.Element) {\n          this._target = _target;\n          return this;\n        }\n\n        return this._target;\n      } // returns the absolute position at a given time\n      ,\n      timeToAbsPos: function timeToAbsPos(timestamp) {\n        return (timestamp - this.situation.start) / (this.situation.duration / this._speed);\n      } // returns the timestamp from a given absolute positon\n      ,\n      absPosToTime: function absPosToTime(absPos) {\n        return this.situation.duration / this._speed * absPos + this.situation.start;\n      } // starts the animationloop\n      ,\n      startAnimFrame: function startAnimFrame() {\n        this.stopAnimFrame();\n        this.animationFrame = window.requestAnimationFrame(function () {\n          this.step();\n        }.bind(this));\n      } // cancels the animationframe\n      ,\n      stopAnimFrame: function stopAnimFrame() {\n        window.cancelAnimationFrame(this.animationFrame);\n      } // kicks off the animation - only does something when the queue is currently not active and at least one situation is set\n      ,\n      start: function start() {\n        // dont start if already started\n        if (!this.active && this.situation) {\n          this.active = true;\n          this.startCurrent();\n        }\n\n        return this;\n      } // start the current situation\n      ,\n      startCurrent: function startCurrent() {\n        this.situation.start = +new Date() + this.situation.delay / this._speed;\n        this.situation.finish = this.situation.start + this.situation.duration / this._speed;\n        return this.initAnimations().step();\n      }\n      /**\r\n       * adds a function / Situation to the animation queue\r\n       * @param fn function / situation to add\r\n       * @return this\r\n       */\n      ,\n      queue: function queue(fn) {\n        if (typeof fn == 'function' || fn instanceof SVG.Situation) this.situations.push(fn);\n        if (!this.situation) this.situation = this.situations.shift();\n        return this;\n      }\n      /**\r\n       * pulls next element from the queue and execute it\r\n       * @return this\r\n       */\n      ,\n      dequeue: function dequeue() {\n        // stop current animation\n        this.stop(); // get next animation from queue\n\n        this.situation = this.situations.shift();\n\n        if (this.situation) {\n          if (this.situation instanceof SVG.Situation) {\n            this.start();\n          } else {\n            // If it is not a SVG.Situation, then it is a function, we execute it\n            this.situation.call(this);\n          }\n        }\n\n        return this;\n      } // updates all animations to the current state of the element\n      // this is important when one property could be changed from another property\n      ,\n      initAnimations: function initAnimations() {\n        var i, j, source;\n        var s = this.situation;\n        if (s.init) return this;\n\n        for (i in s.animations) {\n          source = this.target()[i]();\n\n          if (!Array.isArray(source)) {\n            source = [source];\n          }\n\n          if (!Array.isArray(s.animations[i])) {\n            s.animations[i] = [s.animations[i]];\n          } //if(s.animations[i].length > source.length) {\n          //  source.concat = source.concat(s.animations[i].slice(source.length, s.animations[i].length))\n          //}\n\n\n          for (j = source.length; j--;) {\n            // The condition is because some methods return a normal number instead\n            // of a SVG.Number\n            if (s.animations[i][j] instanceof SVG.Number) source[j] = new SVG.Number(source[j]);\n            s.animations[i][j] = source[j].morph(s.animations[i][j]);\n          }\n        }\n\n        for (i in s.attrs) {\n          s.attrs[i] = new SVG.MorphObj(this.target().attr(i), s.attrs[i]);\n        }\n\n        for (i in s.styles) {\n          s.styles[i] = new SVG.MorphObj(this.target().style(i), s.styles[i]);\n        }\n\n        s.initialTransformation = this.target().matrixify();\n        s.init = true;\n        return this;\n      },\n      clearQueue: function clearQueue() {\n        this.situations = [];\n        return this;\n      },\n      clearCurrent: function clearCurrent() {\n        this.situation = null;\n        return this;\n      }\n      /** stops the animation immediately\r\n       * @param jumpToEnd A Boolean indicating whether to complete the current animation immediately.\r\n       * @param clearQueue A Boolean indicating whether to remove queued animation as well.\r\n       * @return this\r\n       */\n      ,\n      stop: function stop(jumpToEnd, clearQueue) {\n        var active = this.active;\n        this.active = false;\n\n        if (clearQueue) {\n          this.clearQueue();\n        }\n\n        if (jumpToEnd && this.situation) {\n          // initialize the situation if it was not\n          !active && this.startCurrent();\n          this.atEnd();\n        }\n\n        this.stopAnimFrame();\n        return this.clearCurrent();\n      }\n      /** resets the element to the state where the current element has started\r\n       * @return this\r\n       */\n      ,\n      reset: function reset() {\n        if (this.situation) {\n          var temp = this.situation;\n          this.stop();\n          this.situation = temp;\n          this.atStart();\n        }\n\n        return this;\n      } // Stop the currently-running animation, remove all queued animations, and complete all animations for the element.\n      ,\n      finish: function finish() {\n        this.stop(true, false);\n\n        while (this.dequeue().situation && this.stop(true, false)) {\n          ;\n        }\n\n        this.clearQueue().clearCurrent();\n        return this;\n      } // set the internal animation pointer at the start position, before any loops, and updates the visualisation\n      ,\n      atStart: function atStart() {\n        return this.at(0, true);\n      } // set the internal animation pointer at the end position, after all the loops, and updates the visualisation\n      ,\n      atEnd: function atEnd() {\n        if (this.situation.loops === true) {\n          // If in a infinite loop, we end the current iteration\n          this.situation.loops = this.situation.loop + 1;\n        }\n\n        if (typeof this.situation.loops == 'number') {\n          // If performing a finite number of loops, we go after all the loops\n          return this.at(this.situation.loops, true);\n        } else {\n          // If no loops, we just go at the end\n          return this.at(1, true);\n        }\n      } // set the internal animation pointer to the specified position and updates the visualisation\n      // if isAbsPos is true, pos is treated as an absolute position\n      ,\n      at: function at(pos, isAbsPos) {\n        var durDivSpd = this.situation.duration / this._speed;\n        this.absPos = pos; // If pos is not an absolute position, we convert it into one\n\n        if (!isAbsPos) {\n          if (this.situation.reversed) this.absPos = 1 - this.absPos;\n          this.absPos += this.situation.loop;\n        }\n\n        this.situation.start = +new Date() - this.absPos * durDivSpd;\n        this.situation.finish = this.situation.start + durDivSpd;\n        return this.step(true);\n      }\n      /**\r\n       * sets or returns the speed of the animations\r\n       * @param speed null || Number The new speed of the animations\r\n       * @return Number || this\r\n       */\n      ,\n      speed: function speed(_speed) {\n        if (_speed === 0) return this.pause();\n\n        if (_speed) {\n          this._speed = _speed; // We use an absolute position here so that speed can affect the delay before the animation\n\n          return this.at(this.absPos, true);\n        } else return this._speed;\n      } // Make loopable\n      ,\n      loop: function loop(times, reverse) {\n        var c = this.last(); // store total loops\n\n        c.loops = times != null ? times : true;\n        c.loop = 0;\n        if (reverse) c.reversing = true;\n        return this;\n      } // pauses the animation\n      ,\n      pause: function pause() {\n        this.paused = true;\n        this.stopAnimFrame();\n        return this;\n      } // unpause the animation\n      ,\n      play: function play() {\n        if (!this.paused) return this;\n        this.paused = false; // We use an absolute position here so that the delay before the animation can be paused\n\n        return this.at(this.absPos, true);\n      }\n      /**\r\n       * toggle or set the direction of the animation\r\n       * true sets direction to backwards while false sets it to forwards\r\n       * @param reversed Boolean indicating whether to reverse the animation or not (default: toggle the reverse status)\r\n       * @return this\r\n       */\n      ,\n      reverse: function reverse(reversed) {\n        var c = this.last();\n        if (typeof reversed == 'undefined') c.reversed = !c.reversed;else c.reversed = reversed;\n        return this;\n      }\n      /**\r\n       * returns a float from 0-1 indicating the progress of the current animation\r\n       * @param eased Boolean indicating whether the returned position should be eased or not\r\n       * @return number\r\n       */\n      ,\n      progress: function progress(easeIt) {\n        return easeIt ? this.situation.ease(this.pos) : this.pos;\n      }\n      /**\r\n       * adds a callback function which is called when the current animation is finished\r\n       * @param fn Function which should be executed as callback\r\n       * @return number\r\n       */\n      ,\n      after: function after(fn) {\n        var c = this.last(),\n            wrapper = function wrapper(e) {\n          if (e.detail.situation == c) {\n            fn.call(this, c);\n            this.off('finished.fx', wrapper); // prevent memory leak\n          }\n        };\n\n        this.target().on('finished.fx', wrapper);\n        return this._callStart();\n      } // adds a callback which is called whenever one animation step is performed\n      ,\n      during: function during(fn) {\n        var c = this.last(),\n            wrapper = function wrapper(e) {\n          if (e.detail.situation == c) {\n            fn.call(this, e.detail.pos, SVG.morph(e.detail.pos), e.detail.eased, c);\n          }\n        }; // see above\n\n\n        this.target().off('during.fx', wrapper).on('during.fx', wrapper);\n        this.after(function () {\n          this.off('during.fx', wrapper);\n        });\n        return this._callStart();\n      } // calls after ALL animations in the queue are finished\n      ,\n      afterAll: function afterAll(fn) {\n        var wrapper = function wrapper(e) {\n          fn.call(this);\n          this.off('allfinished.fx', wrapper);\n        }; // see above\n\n\n        this.target().off('allfinished.fx', wrapper).on('allfinished.fx', wrapper);\n        return this._callStart();\n      } // calls on every animation step for all animations\n      ,\n      duringAll: function duringAll(fn) {\n        var wrapper = function wrapper(e) {\n          fn.call(this, e.detail.pos, SVG.morph(e.detail.pos), e.detail.eased, e.detail.situation);\n        };\n\n        this.target().off('during.fx', wrapper).on('during.fx', wrapper);\n        this.afterAll(function () {\n          this.off('during.fx', wrapper);\n        });\n        return this._callStart();\n      },\n      last: function last() {\n        return this.situations.length ? this.situations[this.situations.length - 1] : this.situation;\n      } // adds one property to the animations\n      ,\n      add: function add(method, args, type) {\n        this.last()[type || 'animations'][method] = args;\n        return this._callStart();\n      }\n      /** perform one step of the animation\r\n       *  @param ignoreTime Boolean indicating whether to ignore time and use position directly or recalculate position based on time\r\n       *  @return this\r\n       */\n      ,\n      step: function step(ignoreTime) {\n        // convert current time to an absolute position\n        if (!ignoreTime) this.absPos = this.timeToAbsPos(+new Date()); // This part convert an absolute position to a position\n\n        if (this.situation.loops !== false) {\n          var absPos, absPosInt, lastLoop; // If the absolute position is below 0, we just treat it as if it was 0\n\n          absPos = Math.max(this.absPos, 0);\n          absPosInt = Math.floor(absPos);\n\n          if (this.situation.loops === true || absPosInt < this.situation.loops) {\n            this.pos = absPos - absPosInt;\n            lastLoop = this.situation.loop;\n            this.situation.loop = absPosInt;\n          } else {\n            this.absPos = this.situation.loops;\n            this.pos = 1; // The -1 here is because we don't want to toggle reversed when all the loops have been completed\n\n            lastLoop = this.situation.loop - 1;\n            this.situation.loop = this.situation.loops;\n          }\n\n          if (this.situation.reversing) {\n            // Toggle reversed if an odd number of loops as occured since the last call of step\n            this.situation.reversed = this.situation.reversed != Boolean((this.situation.loop - lastLoop) % 2);\n          }\n        } else {\n          // If there are no loop, the absolute position must not be above 1\n          this.absPos = Math.min(this.absPos, 1);\n          this.pos = this.absPos;\n        } // while the absolute position can be below 0, the position must not be below 0\n\n\n        if (this.pos < 0) this.pos = 0;\n        if (this.situation.reversed) this.pos = 1 - this.pos; // apply easing\n\n        var eased = this.situation.ease(this.pos); // call once-callbacks\n\n        for (var i in this.situation.once) {\n          if (i > this.lastPos && i <= eased) {\n            this.situation.once[i].call(this.target(), this.pos, eased);\n            delete this.situation.once[i];\n          }\n        } // fire during callback with position, eased position and current situation as parameter\n\n\n        if (this.active) this.target().fire('during', {\n          pos: this.pos,\n          eased: eased,\n          fx: this,\n          situation: this.situation\n        }); // the user may call stop or finish in the during callback\n        // so make sure that we still have a valid situation\n\n        if (!this.situation) {\n          return this;\n        } // apply the actual animation to every property\n\n\n        this.eachAt(); // do final code when situation is finished\n\n        if (this.pos == 1 && !this.situation.reversed || this.situation.reversed && this.pos == 0) {\n          // stop animation callback\n          this.stopAnimFrame(); // fire finished callback with current situation as parameter\n\n          this.target().fire('finished', {\n            fx: this,\n            situation: this.situation\n          });\n\n          if (!this.situations.length) {\n            this.target().fire('allfinished'); // Recheck the length since the user may call animate in the afterAll callback\n\n            if (!this.situations.length) {\n              this.target().off('.fx'); // there shouldnt be any binding left, but to make sure...\n\n              this.active = false;\n            }\n          } // start next animation\n\n\n          if (this.active) this.dequeue();else this.clearCurrent();\n        } else if (!this.paused && this.active) {\n          // we continue animating when we are not at the end\n          this.startAnimFrame();\n        } // save last eased position for once callback triggering\n\n\n        this.lastPos = eased;\n        return this;\n      } // calculates the step for every property and calls block with it\n      ,\n      eachAt: function eachAt() {\n        var i,\n            len,\n            at,\n            self = this,\n            target = this.target(),\n            s = this.situation; // apply animations which can be called trough a method\n\n        for (i in s.animations) {\n          at = [].concat(s.animations[i]).map(function (el) {\n            return typeof el !== 'string' && el.at ? el.at(s.ease(self.pos), self.pos) : el;\n          });\n          target[i].apply(target, at);\n        } // apply animation which has to be applied with attr()\n\n\n        for (i in s.attrs) {\n          at = [i].concat(s.attrs[i]).map(function (el) {\n            return typeof el !== 'string' && el.at ? el.at(s.ease(self.pos), self.pos) : el;\n          });\n          target.attr.apply(target, at);\n        } // apply animation which has to be applied with style()\n\n\n        for (i in s.styles) {\n          at = [i].concat(s.styles[i]).map(function (el) {\n            return typeof el !== 'string' && el.at ? el.at(s.ease(self.pos), self.pos) : el;\n          });\n          target.style.apply(target, at);\n        } // animate initialTransformation which has to be chained\n\n\n        if (s.transforms.length) {\n          // get initial initialTransformation\n          at = s.initialTransformation;\n\n          for (i = 0, len = s.transforms.length; i < len; i++) {\n            // get next transformation in chain\n            var a = s.transforms[i]; // multiply matrix directly\n\n            if (a instanceof SVG.Matrix) {\n              if (a.relative) {\n                at = at.multiply(new SVG.Matrix().morph(a).at(s.ease(this.pos)));\n              } else {\n                at = at.morph(a).at(s.ease(this.pos));\n              }\n\n              continue;\n            } // when transformation is absolute we have to reset the needed transformation first\n\n\n            if (!a.relative) a.undo(at.extract()); // and reapply it after\n\n            at = at.multiply(a.at(s.ease(this.pos)));\n          } // set new matrix on element\n\n\n          target.matrix(at);\n        }\n\n        return this;\n      } // adds an once-callback which is called at a specific position and never again\n      ,\n      once: function once(pos, fn, isEased) {\n        var c = this.last();\n        if (!isEased) pos = c.ease(pos);\n        c.once[pos] = fn;\n        return this;\n      },\n      _callStart: function _callStart() {\n        setTimeout(function () {\n          this.start();\n        }.bind(this), 0);\n        return this;\n      }\n    },\n    parent: SVG.Element // Add method to parent elements\n    ,\n    construct: {\n      // Get fx module or create a new one, then animate with given duration and ease\n      animate: function animate(o, ease, delay) {\n        return (this.fx || (this.fx = new SVG.FX(this))).animate(o, ease, delay);\n      },\n      delay: function delay(_delay2) {\n        return (this.fx || (this.fx = new SVG.FX(this))).delay(_delay2);\n      },\n      stop: function stop(jumpToEnd, clearQueue) {\n        if (this.fx) this.fx.stop(jumpToEnd, clearQueue);\n        return this;\n      },\n      finish: function finish() {\n        if (this.fx) this.fx.finish();\n        return this;\n      } // Pause current animation\n      ,\n      pause: function pause() {\n        if (this.fx) this.fx.pause();\n        return this;\n      } // Play paused current animation\n      ,\n      play: function play() {\n        if (this.fx) this.fx.play();\n        return this;\n      } // Set/Get the speed of the animations\n      ,\n      speed: function speed(_speed2) {\n        if (this.fx) if (_speed2 == null) return this.fx.speed();else this.fx.speed(_speed2);\n        return this;\n      }\n    }\n  }); // MorphObj is used whenever no morphable object is given\n\n  SVG.MorphObj = SVG.invent({\n    create: function create(from, to) {\n      // prepare color for morphing\n      if (SVG.Color.isColor(to)) return new SVG.Color(from).morph(to); // check if we have a list of values\n\n      if (SVG.regex.delimiter.test(from)) {\n        // prepare path for morphing\n        if (SVG.regex.pathLetters.test(from)) return new SVG.PathArray(from).morph(to); // prepare value list for morphing\n        else return new SVG.Array(from).morph(to);\n      } // prepare number for morphing\n\n\n      if (SVG.regex.numberAndUnit.test(to)) return new SVG.Number(from).morph(to); // prepare for plain morphing\n\n      this.value = from;\n      this.destination = to;\n    },\n    extend: {\n      at: function at(pos, real) {\n        return real < 1 ? this.value : this.destination;\n      },\n      valueOf: function valueOf() {\n        return this.value;\n      }\n    }\n  });\n  SVG.extend(SVG.FX, {\n    // Add animatable attributes\n    attr: function attr(a, v, relative) {\n      // apply attributes individually\n      if (typeof a == 'object') {\n        for (var key in a) {\n          this.attr(key, a[key]);\n        }\n      } else {\n        this.add(a, v, 'attrs');\n      }\n\n      return this;\n    } // Add animatable styles\n    ,\n    style: function style(s, v) {\n      if (typeof s == 'object') for (var key in s) {\n        this.style(key, s[key]);\n      } else this.add(s, v, 'styles');\n      return this;\n    } // Animatable x-axis\n    ,\n    x: function x(_x2, relative) {\n      if (this.target() instanceof SVG.G) {\n        this.transform({\n          x: _x2\n        }, relative);\n        return this;\n      }\n\n      var num = new SVG.Number(_x2);\n      num.relative = relative;\n      return this.add('x', num);\n    } // Animatable y-axis\n    ,\n    y: function y(_y2, relative) {\n      if (this.target() instanceof SVG.G) {\n        this.transform({\n          y: _y2\n        }, relative);\n        return this;\n      }\n\n      var num = new SVG.Number(_y2);\n      num.relative = relative;\n      return this.add('y', num);\n    } // Animatable center x-axis\n    ,\n    cx: function cx(x) {\n      return this.add('cx', new SVG.Number(x));\n    } // Animatable center y-axis\n    ,\n    cy: function cy(y) {\n      return this.add('cy', new SVG.Number(y));\n    } // Add animatable move\n    ,\n    move: function move(x, y) {\n      return this.x(x).y(y);\n    } // Add animatable center\n    ,\n    center: function center(x, y) {\n      return this.cx(x).cy(y);\n    } // Add animatable size\n    ,\n    size: function size(width, height) {\n      if (this.target() instanceof SVG.Text) {\n        // animate font size for Text elements\n        this.attr('font-size', width);\n      } else {\n        // animate bbox based size for all other elements\n        var box;\n\n        if (!width || !height) {\n          box = this.target().bbox();\n        }\n\n        if (!width) {\n          width = box.width / box.height * height;\n        }\n\n        if (!height) {\n          height = box.height / box.width * width;\n        }\n\n        this.add('width', new SVG.Number(width)).add('height', new SVG.Number(height));\n      }\n\n      return this;\n    } // Add animatable width\n    ,\n    width: function width(_width2) {\n      return this.add('width', new SVG.Number(_width2));\n    } // Add animatable height\n    ,\n    height: function height(_height2) {\n      return this.add('height', new SVG.Number(_height2));\n    } // Add animatable plot\n    ,\n    plot: function plot(a, b, c, d) {\n      // Lines can be plotted with 4 arguments\n      if (arguments.length == 4) {\n        return this.plot([a, b, c, d]);\n      }\n\n      return this.add('plot', new (this.target().morphArray)(a));\n    } // Add leading method\n    ,\n    leading: function leading(value) {\n      return this.target().leading ? this.add('leading', new SVG.Number(value)) : this;\n    } // Add animatable viewbox\n    ,\n    viewbox: function viewbox(x, y, width, height) {\n      if (this.target() instanceof SVG.Container) {\n        this.add('viewbox', new SVG.ViewBox(x, y, width, height));\n      }\n\n      return this;\n    },\n    update: function update(o) {\n      if (this.target() instanceof SVG.Stop) {\n        if (typeof o == 'number' || o instanceof SVG.Number) {\n          return this.update({\n            offset: arguments[0],\n            color: arguments[1],\n            opacity: arguments[2]\n          });\n        }\n\n        if (o.opacity != null) this.attr('stop-opacity', o.opacity);\n        if (o.color != null) this.attr('stop-color', o.color);\n        if (o.offset != null) this.attr('offset', o.offset);\n      }\n\n      return this;\n    }\n  });\n  SVG.Box = SVG.invent({\n    create: function create(x, y, width, height) {\n      if (typeof x == 'object' && !(x instanceof SVG.Element)) {\n        // chromes getBoundingClientRect has no x and y property\n        return SVG.Box.call(this, x.left != null ? x.left : x.x, x.top != null ? x.top : x.y, x.width, x.height);\n      } else if (arguments.length == 4) {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n      } // add center, right, bottom...\n\n\n      fullBox(this);\n    },\n    extend: {\n      // Merge rect box with another, return a new instance\n      merge: function merge(box) {\n        var b = new this.constructor(); // merge boxes\n\n        b.x = Math.min(this.x, box.x);\n        b.y = Math.min(this.y, box.y);\n        b.width = Math.max(this.x + this.width, box.x + box.width) - b.x;\n        b.height = Math.max(this.y + this.height, box.y + box.height) - b.y;\n        return fullBox(b);\n      },\n      transform: function transform(m) {\n        var xMin = Infinity,\n            xMax = -Infinity,\n            yMin = Infinity,\n            yMax = -Infinity,\n            p,\n            bbox;\n        var pts = [new SVG.Point(this.x, this.y), new SVG.Point(this.x2, this.y), new SVG.Point(this.x, this.y2), new SVG.Point(this.x2, this.y2)];\n        pts.forEach(function (p) {\n          p = p.transform(m);\n          xMin = Math.min(xMin, p.x);\n          xMax = Math.max(xMax, p.x);\n          yMin = Math.min(yMin, p.y);\n          yMax = Math.max(yMax, p.y);\n        });\n        bbox = new this.constructor();\n        bbox.x = xMin;\n        bbox.width = xMax - xMin;\n        bbox.y = yMin;\n        bbox.height = yMax - yMin;\n        fullBox(bbox);\n        return bbox;\n      }\n    }\n  });\n  SVG.BBox = SVG.invent({\n    // Initialize\n    create: function create(element) {\n      SVG.Box.apply(this, [].slice.call(arguments)); // get values if element is given\n\n      if (element instanceof SVG.Element) {\n        var box; // yes this is ugly, but Firefox can be a pain when it comes to elements that are not yet rendered\n\n        try {\n          if (!document.documentElement.contains) {\n            // This is IE - it does not support contains() for top-level SVGs\n            var topParent = element.node;\n\n            while (topParent.parentNode) {\n              topParent = topParent.parentNode;\n            }\n\n            if (topParent != document) throw new Exception('Element not in the dom');\n          } else {\n            // the element is NOT in the dom, throw error\n            if (!document.documentElement.contains(element.node)) throw new Exception('Element not in the dom');\n          } // find native bbox\n\n\n          box = element.node.getBBox();\n        } catch (e) {\n          if (element instanceof SVG.Shape) {\n            var clone = element.clone(SVG.parser.draw.instance).show();\n            box = clone.node.getBBox();\n            clone.remove();\n          } else {\n            box = {\n              x: element.node.clientLeft,\n              y: element.node.clientTop,\n              width: element.node.clientWidth,\n              height: element.node.clientHeight\n            };\n          }\n        }\n\n        SVG.Box.call(this, box);\n      }\n    } // Define ancestor\n    ,\n    inherit: SVG.Box // Define Parent\n    ,\n    parent: SVG.Element // Constructor\n    ,\n    construct: {\n      // Get bounding box\n      bbox: function bbox() {\n        return new SVG.BBox(this);\n      }\n    }\n  });\n  SVG.BBox.prototype.constructor = SVG.BBox;\n  SVG.extend(SVG.Element, {\n    tbox: function tbox() {\n      console.warn('Use of TBox is deprecated and mapped to RBox. Use .rbox() instead.');\n      return this.rbox(this.doc());\n    }\n  });\n  SVG.RBox = SVG.invent({\n    // Initialize\n    create: function create(element) {\n      SVG.Box.apply(this, [].slice.call(arguments));\n\n      if (element instanceof SVG.Element) {\n        SVG.Box.call(this, element.node.getBoundingClientRect());\n      }\n    },\n    inherit: SVG.Box // define Parent\n    ,\n    parent: SVG.Element,\n    extend: {\n      addOffset: function addOffset() {\n        // offset by window scroll position, because getBoundingClientRect changes when window is scrolled\n        this.x += window.pageXOffset;\n        this.y += window.pageYOffset;\n        return this;\n      }\n    } // Constructor\n    ,\n    construct: {\n      // Get rect box\n      rbox: function rbox(el) {\n        if (el) return new SVG.RBox(this).transform(el.screenCTM().inverse());\n        return new SVG.RBox(this).addOffset();\n      }\n    }\n  });\n  SVG.RBox.prototype.constructor = SVG.RBox;\n  SVG.Matrix = SVG.invent({\n    // Initialize\n    create: function create(source) {\n      var i,\n          base = arrayToMatrix([1, 0, 0, 1, 0, 0]); // ensure source as object\n\n      source = source instanceof SVG.Element ? source.matrixify() : typeof source === 'string' ? arrayToMatrix(source.split(SVG.regex.delimiter).map(parseFloat)) : arguments.length == 6 ? arrayToMatrix([].slice.call(arguments)) : Array.isArray(source) ? arrayToMatrix(source) : typeof source === 'object' ? source : base; // merge source\n\n      for (i = abcdef.length - 1; i >= 0; --i) {\n        this[abcdef[i]] = source[abcdef[i]] != null ? source[abcdef[i]] : base[abcdef[i]];\n      }\n    } // Add methods\n    ,\n    extend: {\n      // Extract individual transformations\n      extract: function extract() {\n        // find delta transform points\n        var px = deltaTransformPoint(this, 0, 1),\n            py = deltaTransformPoint(this, 1, 0),\n            skewX = 180 / Math.PI * Math.atan2(px.y, px.x) - 90;\n        return {\n          // translation\n          x: this.e,\n          y: this.f,\n          transformedX: (this.e * Math.cos(skewX * Math.PI / 180) + this.f * Math.sin(skewX * Math.PI / 180)) / Math.sqrt(this.a * this.a + this.b * this.b),\n          transformedY: (this.f * Math.cos(skewX * Math.PI / 180) + this.e * Math.sin(-skewX * Math.PI / 180)) / Math.sqrt(this.c * this.c + this.d * this.d) // skew\n          ,\n          skewX: -skewX,\n          skewY: 180 / Math.PI * Math.atan2(py.y, py.x) // scale\n          ,\n          scaleX: Math.sqrt(this.a * this.a + this.b * this.b),\n          scaleY: Math.sqrt(this.c * this.c + this.d * this.d) // rotation\n          ,\n          rotation: skewX,\n          a: this.a,\n          b: this.b,\n          c: this.c,\n          d: this.d,\n          e: this.e,\n          f: this.f,\n          matrix: new SVG.Matrix(this)\n        };\n      } // Clone matrix\n      ,\n      clone: function clone() {\n        return new SVG.Matrix(this);\n      } // Morph one matrix into another\n      ,\n      morph: function morph(matrix) {\n        // store new destination\n        this.destination = new SVG.Matrix(matrix);\n        return this;\n      } // Get morphed matrix at a given position\n      ,\n      at: function at(pos) {\n        // make sure a destination is defined\n        if (!this.destination) return this; // calculate morphed matrix at a given position\n\n        var matrix = new SVG.Matrix({\n          a: this.a + (this.destination.a - this.a) * pos,\n          b: this.b + (this.destination.b - this.b) * pos,\n          c: this.c + (this.destination.c - this.c) * pos,\n          d: this.d + (this.destination.d - this.d) * pos,\n          e: this.e + (this.destination.e - this.e) * pos,\n          f: this.f + (this.destination.f - this.f) * pos\n        });\n        return matrix;\n      } // Multiplies by given matrix\n      ,\n      multiply: function multiply(matrix) {\n        return new SVG.Matrix(this.native().multiply(parseMatrix(matrix).native()));\n      } // Inverses matrix\n      ,\n      inverse: function inverse() {\n        return new SVG.Matrix(this.native().inverse());\n      } // Translate matrix\n      ,\n      translate: function translate(x, y) {\n        return new SVG.Matrix(this.native().translate(x || 0, y || 0));\n      } // Scale matrix\n      ,\n      scale: function scale(x, y, cx, cy) {\n        // support uniformal scale\n        if (arguments.length == 1) {\n          y = x;\n        } else if (arguments.length == 3) {\n          cy = cx;\n          cx = y;\n          y = x;\n        }\n\n        return this.around(cx, cy, new SVG.Matrix(x, 0, 0, y, 0, 0));\n      } // Rotate matrix\n      ,\n      rotate: function rotate(r, cx, cy) {\n        // convert degrees to radians\n        r = SVG.utils.radians(r);\n        return this.around(cx, cy, new SVG.Matrix(Math.cos(r), Math.sin(r), -Math.sin(r), Math.cos(r), 0, 0));\n      } // Flip matrix on x or y, at a given offset\n      ,\n      flip: function flip(a, o) {\n        return a == 'x' ? this.scale(-1, 1, o, 0) : a == 'y' ? this.scale(1, -1, 0, o) : this.scale(-1, -1, a, o != null ? o : a);\n      } // Skew\n      ,\n      skew: function skew(x, y, cx, cy) {\n        // support uniformal skew\n        if (arguments.length == 1) {\n          y = x;\n        } else if (arguments.length == 3) {\n          cy = cx;\n          cx = y;\n          y = x;\n        } // convert degrees to radians\n\n\n        x = SVG.utils.radians(x);\n        y = SVG.utils.radians(y);\n        return this.around(cx, cy, new SVG.Matrix(1, Math.tan(y), Math.tan(x), 1, 0, 0));\n      } // SkewX\n      ,\n      skewX: function skewX(x, cx, cy) {\n        return this.skew(x, 0, cx, cy);\n      } // SkewY\n      ,\n      skewY: function skewY(y, cx, cy) {\n        return this.skew(0, y, cx, cy);\n      } // Transform around a center point\n      ,\n      around: function around(cx, cy, matrix) {\n        return this.multiply(new SVG.Matrix(1, 0, 0, 1, cx || 0, cy || 0)).multiply(matrix).multiply(new SVG.Matrix(1, 0, 0, 1, -cx || 0, -cy || 0));\n      } // Convert to native SVGMatrix\n      ,\n      native: function native() {\n        // create new matrix\n        var matrix = SVG.parser.native.createSVGMatrix(); // update with current values\n\n        for (var i = abcdef.length - 1; i >= 0; i--) {\n          matrix[abcdef[i]] = this[abcdef[i]];\n        }\n\n        return matrix;\n      } // Convert matrix to string\n      ,\n      toString: function toString() {\n        // Construct the matrix directly, avoid values that are too small\n        return 'matrix(' + float32String(this.a) + ',' + float32String(this.b) + ',' + float32String(this.c) + ',' + float32String(this.d) + ',' + float32String(this.e) + ',' + float32String(this.f) + ')';\n      }\n    } // Define parent\n    ,\n    parent: SVG.Element // Add parent method\n    ,\n    construct: {\n      // Get current matrix\n      ctm: function ctm() {\n        return new SVG.Matrix(this.node.getCTM());\n      },\n      // Get current screen matrix\n      screenCTM: function screenCTM() {\n        /* https://bugzilla.mozilla.org/show_bug.cgi?id=1344537\r\n           This is needed because FF does not return the transformation matrix\r\n           for the inner coordinate system when getScreenCTM() is called on nested svgs.\r\n           However all other Browsers do that */\n        if (this instanceof SVG.Nested) {\n          var rect = this.rect(1, 1);\n          var m = rect.node.getScreenCTM();\n          rect.remove();\n          return new SVG.Matrix(m);\n        }\n\n        return new SVG.Matrix(this.node.getScreenCTM());\n      }\n    }\n  });\n  SVG.Point = SVG.invent({\n    // Initialize\n    create: function create(x, y) {\n      var i,\n          source,\n          base = {\n        x: 0,\n        y: 0\n      }; // ensure source as object\n\n      source = Array.isArray(x) ? {\n        x: x[0],\n        y: x[1]\n      } : typeof x === 'object' ? {\n        x: x.x,\n        y: x.y\n      } : x != null ? {\n        x: x,\n        y: y != null ? y : x\n      } : base; // If y has no value, then x is used has its value\n      // merge source\n\n      this.x = source.x;\n      this.y = source.y;\n    } // Add methods\n    ,\n    extend: {\n      // Clone point\n      clone: function clone() {\n        return new SVG.Point(this);\n      } // Morph one point into another\n      ,\n      morph: function morph(x, y) {\n        // store new destination\n        this.destination = new SVG.Point(x, y);\n        return this;\n      } // Get morphed point at a given position\n      ,\n      at: function at(pos) {\n        // make sure a destination is defined\n        if (!this.destination) return this; // calculate morphed matrix at a given position\n\n        var point = new SVG.Point({\n          x: this.x + (this.destination.x - this.x) * pos,\n          y: this.y + (this.destination.y - this.y) * pos\n        });\n        return point;\n      } // Convert to native SVGPoint\n      ,\n      native: function native() {\n        // create new point\n        var point = SVG.parser.native.createSVGPoint(); // update with current values\n\n        point.x = this.x;\n        point.y = this.y;\n        return point;\n      } // transform point with matrix\n      ,\n      transform: function transform(matrix) {\n        return new SVG.Point(this.native().matrixTransform(matrix.native()));\n      }\n    }\n  });\n  SVG.extend(SVG.Element, {\n    // Get point\n    point: function point(x, y) {\n      return new SVG.Point(x, y).transform(this.screenCTM().inverse());\n    }\n  });\n  SVG.extend(SVG.Element, {\n    // Set svg element attribute\n    attr: function attr(a, v, n) {\n      // act as full getter\n      if (a == null) {\n        // get an object of attributes\n        a = {};\n        v = this.node.attributes;\n\n        for (n = v.length - 1; n >= 0; n--) {\n          a[v[n].nodeName] = SVG.regex.isNumber.test(v[n].nodeValue) ? parseFloat(v[n].nodeValue) : v[n].nodeValue;\n        }\n\n        return a;\n      } else if (typeof a == 'object') {\n        // apply every attribute individually if an object is passed\n        for (v in a) {\n          this.attr(v, a[v]);\n        }\n      } else if (v === null) {\n        // remove value\n        this.node.removeAttribute(a);\n      } else if (v == null) {\n        // act as a getter if the first and only argument is not an object\n        v = this.node.getAttribute(a);\n        return v == null ? SVG.defaults.attrs[a] : SVG.regex.isNumber.test(v) ? parseFloat(v) : v;\n      } else {\n        // BUG FIX: some browsers will render a stroke if a color is given even though stroke width is 0\n        if (a == 'stroke-width') this.attr('stroke', parseFloat(v) > 0 ? this._stroke : null);else if (a == 'stroke') this._stroke = v; // convert image fill and stroke to patterns\n\n        if (a == 'fill' || a == 'stroke') {\n          if (SVG.regex.isImage.test(v)) v = this.doc().defs().image(v, 0, 0);\n          if (v instanceof SVG.Image) v = this.doc().defs().pattern(0, 0, function () {\n            this.add(v);\n          });\n        } // ensure correct numeric values (also accepts NaN and Infinity)\n\n\n        if (typeof v === 'number') v = new SVG.Number(v); // ensure full hex color\n        else if (SVG.Color.isColor(v)) v = new SVG.Color(v); // parse array values\n          else if (Array.isArray(v)) v = new SVG.Array(v); // if the passed attribute is leading...\n\n        if (a == 'leading') {\n          // ... call the leading method instead\n          if (this.leading) this.leading(v);\n        } else {\n          // set given attribute on node\n          typeof n === 'string' ? this.node.setAttributeNS(n, a, v.toString()) : this.node.setAttribute(a, v.toString());\n        } // rebuild if required\n\n\n        if (this.rebuild && (a == 'font-size' || a == 'x')) this.rebuild(a, v);\n      }\n\n      return this;\n    }\n  });\n  SVG.extend(SVG.Element, {\n    // Add transformations\n    transform: function transform(o, relative) {\n      // get target in case of the fx module, otherwise reference this\n      var target = this,\n          matrix,\n          bbox; // act as a getter\n\n      if (typeof o !== 'object') {\n        // get current matrix\n        matrix = new SVG.Matrix(target).extract();\n        return typeof o === 'string' ? matrix[o] : matrix;\n      } // get current matrix\n\n\n      matrix = new SVG.Matrix(target); // ensure relative flag\n\n      relative = !!relative || !!o.relative; // act on matrix\n\n      if (o.a != null) {\n        matrix = relative ? // relative\n        matrix.multiply(new SVG.Matrix(o)) : // absolute\n        new SVG.Matrix(o); // act on rotation\n      } else if (o.rotation != null) {\n        // ensure centre point\n        ensureCentre(o, target); // apply transformation\n\n        matrix = relative ? // relative\n        matrix.rotate(o.rotation, o.cx, o.cy) : // absolute\n        matrix.rotate(o.rotation - matrix.extract().rotation, o.cx, o.cy); // act on scale\n      } else if (o.scale != null || o.scaleX != null || o.scaleY != null) {\n        // ensure centre point\n        ensureCentre(o, target); // ensure scale values on both axes\n\n        o.scaleX = o.scale != null ? o.scale : o.scaleX != null ? o.scaleX : 1;\n        o.scaleY = o.scale != null ? o.scale : o.scaleY != null ? o.scaleY : 1;\n\n        if (!relative) {\n          // absolute; multiply inversed values\n          var e = matrix.extract();\n          o.scaleX = o.scaleX * 1 / e.scaleX;\n          o.scaleY = o.scaleY * 1 / e.scaleY;\n        }\n\n        matrix = matrix.scale(o.scaleX, o.scaleY, o.cx, o.cy); // act on skew\n      } else if (o.skew != null || o.skewX != null || o.skewY != null) {\n        // ensure centre point\n        ensureCentre(o, target); // ensure skew values on both axes\n\n        o.skewX = o.skew != null ? o.skew : o.skewX != null ? o.skewX : 0;\n        o.skewY = o.skew != null ? o.skew : o.skewY != null ? o.skewY : 0;\n\n        if (!relative) {\n          // absolute; reset skew values\n          var e = matrix.extract();\n          matrix = matrix.multiply(new SVG.Matrix().skew(e.skewX, e.skewY, o.cx, o.cy).inverse());\n        }\n\n        matrix = matrix.skew(o.skewX, o.skewY, o.cx, o.cy); // act on flip\n      } else if (o.flip) {\n        if (o.flip == 'x' || o.flip == 'y') {\n          o.offset = o.offset == null ? target.bbox()['c' + o.flip] : o.offset;\n        } else {\n          if (o.offset == null) {\n            bbox = target.bbox();\n            o.flip = bbox.cx;\n            o.offset = bbox.cy;\n          } else {\n            o.flip = o.offset;\n          }\n        }\n\n        matrix = new SVG.Matrix().flip(o.flip, o.offset); // act on translate\n      } else if (o.x != null || o.y != null) {\n        if (relative) {\n          // relative\n          matrix = matrix.translate(o.x, o.y);\n        } else {\n          // absolute\n          if (o.x != null) matrix.e = o.x;\n          if (o.y != null) matrix.f = o.y;\n        }\n      }\n\n      return this.attr('transform', matrix);\n    }\n  });\n  SVG.extend(SVG.FX, {\n    transform: function transform(o, relative) {\n      // get target in case of the fx module, otherwise reference this\n      var target = this.target(),\n          matrix,\n          bbox; // act as a getter\n\n      if (typeof o !== 'object') {\n        // get current matrix\n        matrix = new SVG.Matrix(target).extract();\n        return typeof o === 'string' ? matrix[o] : matrix;\n      } // ensure relative flag\n\n\n      relative = !!relative || !!o.relative; // act on matrix\n\n      if (o.a != null) {\n        matrix = new SVG.Matrix(o); // act on rotation\n      } else if (o.rotation != null) {\n        // ensure centre point\n        ensureCentre(o, target); // apply transformation\n\n        matrix = new SVG.Rotate(o.rotation, o.cx, o.cy); // act on scale\n      } else if (o.scale != null || o.scaleX != null || o.scaleY != null) {\n        // ensure centre point\n        ensureCentre(o, target); // ensure scale values on both axes\n\n        o.scaleX = o.scale != null ? o.scale : o.scaleX != null ? o.scaleX : 1;\n        o.scaleY = o.scale != null ? o.scale : o.scaleY != null ? o.scaleY : 1;\n        matrix = new SVG.Scale(o.scaleX, o.scaleY, o.cx, o.cy); // act on skew\n      } else if (o.skewX != null || o.skewY != null) {\n        // ensure centre point\n        ensureCentre(o, target); // ensure skew values on both axes\n\n        o.skewX = o.skewX != null ? o.skewX : 0;\n        o.skewY = o.skewY != null ? o.skewY : 0;\n        matrix = new SVG.Skew(o.skewX, o.skewY, o.cx, o.cy); // act on flip\n      } else if (o.flip) {\n        if (o.flip == 'x' || o.flip == 'y') {\n          o.offset = o.offset == null ? target.bbox()['c' + o.flip] : o.offset;\n        } else {\n          if (o.offset == null) {\n            bbox = target.bbox();\n            o.flip = bbox.cx;\n            o.offset = bbox.cy;\n          } else {\n            o.flip = o.offset;\n          }\n        }\n\n        matrix = new SVG.Matrix().flip(o.flip, o.offset); // act on translate\n      } else if (o.x != null || o.y != null) {\n        matrix = new SVG.Translate(o.x, o.y);\n      }\n\n      if (!matrix) return this;\n      matrix.relative = relative;\n      this.last().transforms.push(matrix);\n      return this._callStart();\n    }\n  });\n  SVG.extend(SVG.Element, {\n    // Reset all transformations\n    untransform: function untransform() {\n      return this.attr('transform', null);\n    },\n    // merge the whole transformation chain into one matrix and returns it\n    matrixify: function matrixify() {\n      var matrix = (this.attr('transform') || ''). // split transformations\n      split(SVG.regex.transforms).slice(0, -1).map(function (str) {\n        // generate key => value pairs\n        var kv = str.trim().split('(');\n        return [kv[0], kv[1].split(SVG.regex.delimiter).map(function (str) {\n          return parseFloat(str);\n        })];\n      }) // merge every transformation into one matrix\n      .reduce(function (matrix, transform) {\n        if (transform[0] == 'matrix') return matrix.multiply(arrayToMatrix(transform[1]));\n        return matrix[transform[0]].apply(matrix, transform[1]);\n      }, new SVG.Matrix());\n      return matrix;\n    },\n    // add an element to another parent without changing the visual representation on the screen\n    toParent: function toParent(parent) {\n      if (this == parent) return this;\n      var ctm = this.screenCTM();\n      var pCtm = parent.screenCTM().inverse();\n      this.addTo(parent).untransform().transform(pCtm.multiply(ctm));\n      return this;\n    },\n    // same as above with parent equals root-svg\n    toDoc: function toDoc() {\n      return this.toParent(this.doc());\n    }\n  });\n  SVG.Transformation = SVG.invent({\n    create: function create(source, inversed) {\n      if (arguments.length > 1 && typeof inversed != 'boolean') {\n        return this.constructor.call(this, [].slice.call(arguments));\n      }\n\n      if (Array.isArray(source)) {\n        for (var i = 0, len = this.arguments.length; i < len; ++i) {\n          this[this.arguments[i]] = source[i];\n        }\n      } else if (typeof source == 'object') {\n        for (var i = 0, len = this.arguments.length; i < len; ++i) {\n          this[this.arguments[i]] = source[this.arguments[i]];\n        }\n      }\n\n      this.inversed = false;\n\n      if (inversed === true) {\n        this.inversed = true;\n      }\n    },\n    extend: {\n      arguments: [],\n      method: '',\n      at: function at(pos) {\n        var params = [];\n\n        for (var i = 0, len = this.arguments.length; i < len; ++i) {\n          params.push(this[this.arguments[i]]);\n        }\n\n        var m = this._undo || new SVG.Matrix();\n        m = new SVG.Matrix().morph(SVG.Matrix.prototype[this.method].apply(m, params)).at(pos);\n        return this.inversed ? m.inverse() : m;\n      },\n      undo: function undo(o) {\n        for (var i = 0, len = this.arguments.length; i < len; ++i) {\n          o[this.arguments[i]] = typeof this[this.arguments[i]] == 'undefined' ? 0 : o[this.arguments[i]];\n        } // The method SVG.Matrix.extract which was used before calling this\n        // method to obtain a value for the parameter o doesn't return a cx and\n        // a cy so we use the ones that were provided to this object at its creation\n\n\n        o.cx = this.cx;\n        o.cy = this.cy;\n        this._undo = new SVG[capitalize(this.method)](o, true).at(1);\n        return this;\n      }\n    }\n  });\n  SVG.Translate = SVG.invent({\n    parent: SVG.Matrix,\n    inherit: SVG.Transformation,\n    create: function create(source, inversed) {\n      this.constructor.apply(this, [].slice.call(arguments));\n    },\n    extend: {\n      arguments: ['transformedX', 'transformedY'],\n      method: 'translate'\n    }\n  });\n  SVG.Rotate = SVG.invent({\n    parent: SVG.Matrix,\n    inherit: SVG.Transformation,\n    create: function create(source, inversed) {\n      this.constructor.apply(this, [].slice.call(arguments));\n    },\n    extend: {\n      arguments: ['rotation', 'cx', 'cy'],\n      method: 'rotate',\n      at: function at(pos) {\n        var m = new SVG.Matrix().rotate(new SVG.Number().morph(this.rotation - (this._undo ? this._undo.rotation : 0)).at(pos), this.cx, this.cy);\n        return this.inversed ? m.inverse() : m;\n      },\n      undo: function undo(o) {\n        this._undo = o;\n        return this;\n      }\n    }\n  });\n  SVG.Scale = SVG.invent({\n    parent: SVG.Matrix,\n    inherit: SVG.Transformation,\n    create: function create(source, inversed) {\n      this.constructor.apply(this, [].slice.call(arguments));\n    },\n    extend: {\n      arguments: ['scaleX', 'scaleY', 'cx', 'cy'],\n      method: 'scale'\n    }\n  });\n  SVG.Skew = SVG.invent({\n    parent: SVG.Matrix,\n    inherit: SVG.Transformation,\n    create: function create(source, inversed) {\n      this.constructor.apply(this, [].slice.call(arguments));\n    },\n    extend: {\n      arguments: ['skewX', 'skewY', 'cx', 'cy'],\n      method: 'skew'\n    }\n  });\n  SVG.extend(SVG.Element, {\n    // Dynamic style generator\n    style: function style(s, v) {\n      if (arguments.length == 0) {\n        // get full style\n        return this.node.style.cssText || '';\n      } else if (arguments.length < 2) {\n        // apply every style individually if an object is passed\n        if (typeof s == 'object') {\n          for (v in s) {\n            this.style(v, s[v]);\n          }\n        } else if (SVG.regex.isCss.test(s)) {\n          // parse css string\n          s = s.split(/\\s*;\\s*/) // filter out suffix ; and stuff like ;;\n          .filter(function (e) {\n            return !!e;\n          }).map(function (e) {\n            return e.split(/\\s*:\\s*/);\n          }); // apply every definition individually\n\n          while (v = s.pop()) {\n            this.style(v[0], v[1]);\n          }\n        } else {\n          // act as a getter if the first and only argument is not an object\n          return this.node.style[camelCase(s)];\n        }\n      } else {\n        this.node.style[camelCase(s)] = v === null || SVG.regex.isBlank.test(v) ? '' : v;\n      }\n\n      return this;\n    }\n  });\n  SVG.Parent = SVG.invent({\n    // Initialize node\n    create: function create(element) {\n      this.constructor.call(this, element);\n    } // Inherit from\n    ,\n    inherit: SVG.Element // Add class methods\n    ,\n    extend: {\n      // Returns all child elements\n      children: function children() {\n        return SVG.utils.map(SVG.utils.filterSVGElements(this.node.childNodes), function (node) {\n          return SVG.adopt(node);\n        });\n      } // Add given element at a position\n      ,\n      add: function add(element, i) {\n        if (i == null) this.node.appendChild(element.node);else if (element.node != this.node.childNodes[i]) this.node.insertBefore(element.node, this.node.childNodes[i]);\n        return this;\n      } // Basically does the same as `add()` but returns the added element instead\n      ,\n      put: function put(element, i) {\n        this.add(element, i);\n        return element;\n      } // Checks if the given element is a child\n      ,\n      has: function has(element) {\n        return this.index(element) >= 0;\n      } // Gets index of given element\n      ,\n      index: function index(element) {\n        return [].slice.call(this.node.childNodes).indexOf(element.node);\n      } // Get a element at the given index\n      ,\n      get: function get(i) {\n        return SVG.adopt(this.node.childNodes[i]);\n      } // Get first child\n      ,\n      first: function first() {\n        return this.get(0);\n      } // Get the last child\n      ,\n      last: function last() {\n        return this.get(this.node.childNodes.length - 1);\n      } // Iterates over all children and invokes a given block\n      ,\n      each: function each(block, deep) {\n        var i,\n            il,\n            children = this.children();\n\n        for (i = 0, il = children.length; i < il; i++) {\n          if (children[i] instanceof SVG.Element) block.apply(children[i], [i, children]);\n          if (deep && children[i] instanceof SVG.Container) children[i].each(block, deep);\n        }\n\n        return this;\n      } // Remove a given child\n      ,\n      removeElement: function removeElement(element) {\n        this.node.removeChild(element.node);\n        return this;\n      } // Remove all elements in this container\n      ,\n      clear: function clear() {\n        // remove children\n        while (this.node.hasChildNodes()) {\n          this.node.removeChild(this.node.lastChild);\n        } // remove defs reference\n\n\n        delete this._defs;\n        return this;\n      },\n      // Get defs\n      defs: function defs() {\n        return this.doc().defs();\n      }\n    }\n  });\n  SVG.extend(SVG.Parent, {\n    ungroup: function ungroup(parent, depth) {\n      if (depth === 0 || this instanceof SVG.Defs || this.node == SVG.parser.draw) return this;\n      parent = parent || (this instanceof SVG.Doc ? this : this.parent(SVG.Parent));\n      depth = depth || Infinity;\n      this.each(function () {\n        if (this instanceof SVG.Defs) return this;\n        if (this instanceof SVG.Parent) return this.ungroup(parent, depth - 1);\n        return this.toParent(parent);\n      });\n      this.node.firstChild || this.remove();\n      return this;\n    },\n    flatten: function flatten(parent, depth) {\n      return this.ungroup(parent, depth);\n    }\n  });\n  SVG.Container = SVG.invent({\n    // Initialize node\n    create: function create(element) {\n      this.constructor.call(this, element);\n    } // Inherit from\n    ,\n    inherit: SVG.Parent\n  });\n  SVG.ViewBox = SVG.invent({\n    create: function create(source) {\n      var i,\n          base = [0, 0, 0, 0];\n      var x,\n          y,\n          width,\n          height,\n          box,\n          view,\n          we,\n          he,\n          wm = 1 // width multiplier\n      ,\n          hm = 1 // height multiplier\n      ,\n          reg = /[+-]?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?/gi;\n\n      if (source instanceof SVG.Element) {\n        we = source;\n        he = source;\n        view = (source.attr('viewBox') || '').match(reg);\n        box = source.bbox; // get dimensions of current node\n\n        width = new SVG.Number(source.width());\n        height = new SVG.Number(source.height()); // find nearest non-percentual dimensions\n\n        while (width.unit == '%') {\n          wm *= width.value;\n          width = new SVG.Number(we instanceof SVG.Doc ? we.parent().offsetWidth : we.parent().width());\n          we = we.parent();\n        }\n\n        while (height.unit == '%') {\n          hm *= height.value;\n          height = new SVG.Number(he instanceof SVG.Doc ? he.parent().offsetHeight : he.parent().height());\n          he = he.parent();\n        } // ensure defaults\n\n\n        this.x = 0;\n        this.y = 0;\n        this.width = width * wm;\n        this.height = height * hm;\n        this.zoom = 1;\n\n        if (view) {\n          // get width and height from viewbox\n          x = parseFloat(view[0]);\n          y = parseFloat(view[1]);\n          width = parseFloat(view[2]);\n          height = parseFloat(view[3]); // calculate zoom accoring to viewbox\n\n          this.zoom = this.width / this.height > width / height ? this.height / height : this.width / width; // calculate real pixel dimensions on parent SVG.Doc element\n\n          this.x = x;\n          this.y = y;\n          this.width = width;\n          this.height = height;\n        }\n      } else {\n        // ensure source as object\n        source = typeof source === 'string' ? source.match(reg).map(function (el) {\n          return parseFloat(el);\n        }) : Array.isArray(source) ? source : typeof source == 'object' ? [source.x, source.y, source.width, source.height] : arguments.length == 4 ? [].slice.call(arguments) : base;\n        this.x = source[0];\n        this.y = source[1];\n        this.width = source[2];\n        this.height = source[3];\n      }\n    },\n    extend: {\n      toString: function toString() {\n        return this.x + ' ' + this.y + ' ' + this.width + ' ' + this.height;\n      },\n      morph: function morph(x, y, width, height) {\n        this.destination = new SVG.ViewBox(x, y, width, height);\n        return this;\n      },\n      at: function at(pos) {\n        if (!this.destination) return this;\n        return new SVG.ViewBox([this.x + (this.destination.x - this.x) * pos, this.y + (this.destination.y - this.y) * pos, this.width + (this.destination.width - this.width) * pos, this.height + (this.destination.height - this.height) * pos]);\n      }\n    } // Define parent\n    ,\n    parent: SVG.Container // Add parent method\n    ,\n    construct: {\n      // get/set viewbox\n      viewbox: function viewbox(x, y, width, height) {\n        if (arguments.length == 0) // act as a getter if there are no arguments\n          return new SVG.ViewBox(this); // otherwise act as a setter\n\n        return this.attr('viewBox', new SVG.ViewBox(x, y, width, height));\n      }\n    }\n  }) // Add events to elements\n  ;\n  ['click', 'dblclick', 'mousedown', 'mouseup', 'mouseover', 'mouseout', 'mousemove', 'mouseenter', 'mouseleave', 'touchstart', 'touchmove', 'touchleave', 'touchend', 'touchcancel'].forEach(function (event) {\n    // add event to SVG.Element\n    SVG.Element.prototype[event] = function (f) {\n      // bind event to element rather than element node\n      if (f == null) {\n        SVG.off(this, event);\n      } else {\n        SVG.on(this, event, f);\n      }\n\n      return this;\n    };\n  });\n  SVG.listenerId = 0; // Add event binder in the SVG namespace\n\n  SVG.on = function (node, events, listener, binding, options) {\n    var l = listener.bind(binding || node);\n    var n = node instanceof SVG.Element ? node.node : node; // ensure instance object for nodes which are not adopted\n\n    n.instance = n.instance || {\n      _events: {}\n    };\n    var bag = n.instance._events; // add id to listener\n\n    if (!listener._svgjsListenerId) {\n      listener._svgjsListenerId = ++SVG.listenerId;\n    }\n\n    events.split(SVG.regex.delimiter).forEach(function (event) {\n      var ev = event.split('.')[0];\n      var ns = event.split('.')[1] || '*'; // ensure valid object\n\n      bag[ev] = bag[ev] || {};\n      bag[ev][ns] = bag[ev][ns] || {}; // reference listener\n\n      bag[ev][ns][listener._svgjsListenerId] = l; // add listener\n\n      n.addEventListener(ev, l, options || false);\n    });\n  }; // Add event unbinder in the SVG namespace\n\n\n  SVG.off = function (node, events, listener, options) {\n    var n = node instanceof SVG.Element ? node.node : node;\n    if (!n.instance) return; // listener can be a function or a number\n\n    if (typeof listener === 'function') {\n      listener = listener._svgjsListenerId;\n      if (!listener) return;\n    }\n\n    var bag = n.instance._events;\n    (events || '').split(SVG.regex.delimiter).forEach(function (event) {\n      var ev = event && event.split('.')[0];\n      var ns = event && event.split('.')[1];\n      var namespace, l;\n\n      if (listener) {\n        // remove listener reference\n        if (bag[ev] && bag[ev][ns || '*']) {\n          // removeListener\n          n.removeEventListener(ev, bag[ev][ns || '*'][listener], options || false);\n          delete bag[ev][ns || '*'][listener];\n        }\n      } else if (ev && ns) {\n        // remove all listeners for a namespaced event\n        if (bag[ev] && bag[ev][ns]) {\n          for (l in bag[ev][ns]) {\n            SVG.off(n, [ev, ns].join('.'), l);\n          }\n\n          delete bag[ev][ns];\n        }\n      } else if (ns) {\n        // remove all listeners for a specific namespace\n        for (event in bag) {\n          for (namespace in bag[event]) {\n            if (ns === namespace) {\n              SVG.off(n, [event, ns].join('.'));\n            }\n          }\n        }\n      } else if (ev) {\n        // remove all listeners for the event\n        if (bag[ev]) {\n          for (namespace in bag[ev]) {\n            SVG.off(n, [ev, namespace].join('.'));\n          }\n\n          delete bag[ev];\n        }\n      } else {\n        // remove all listeners on a given node\n        for (event in bag) {\n          SVG.off(n, event);\n        }\n\n        n.instance._events = {};\n      }\n    });\n  };\n\n  SVG.extend(SVG.Element, {\n    // Bind given event to listener\n    on: function on(event, listener, binding, options) {\n      SVG.on(this, event, listener, binding, options);\n      return this;\n    },\n    // Unbind event from listener\n    off: function off(event, listener) {\n      SVG.off(this.node, event, listener);\n      return this;\n    },\n    fire: function fire(event, data) {\n      // Dispatch event\n      if (event instanceof window.Event) {\n        this.node.dispatchEvent(event);\n      } else {\n        this.node.dispatchEvent(event = new SVG.CustomEvent(event, {\n          detail: data,\n          cancelable: true\n        }));\n      }\n\n      this._event = event;\n      return this;\n    },\n    event: function event() {\n      return this._event;\n    }\n  });\n  SVG.Defs = SVG.invent({\n    // Initialize node\n    create: 'defs' // Inherit from\n    ,\n    inherit: SVG.Container\n  });\n  SVG.G = SVG.invent({\n    // Initialize node\n    create: 'g' // Inherit from\n    ,\n    inherit: SVG.Container // Add class methods\n    ,\n    extend: {\n      // Move over x-axis\n      x: function x(_x3) {\n        return _x3 == null ? this.transform('x') : this.transform({\n          x: _x3 - this.x()\n        }, true);\n      } // Move over y-axis\n      ,\n      y: function y(_y3) {\n        return _y3 == null ? this.transform('y') : this.transform({\n          y: _y3 - this.y()\n        }, true);\n      } // Move by center over x-axis\n      ,\n      cx: function cx(x) {\n        return x == null ? this.gbox().cx : this.x(x - this.gbox().width / 2);\n      } // Move by center over y-axis\n      ,\n      cy: function cy(y) {\n        return y == null ? this.gbox().cy : this.y(y - this.gbox().height / 2);\n      },\n      gbox: function gbox() {\n        var bbox = this.bbox(),\n            trans = this.transform();\n        bbox.x += trans.x;\n        bbox.x2 += trans.x;\n        bbox.cx += trans.x;\n        bbox.y += trans.y;\n        bbox.y2 += trans.y;\n        bbox.cy += trans.y;\n        return bbox;\n      }\n    } // Add parent method\n    ,\n    construct: {\n      // Create a group element\n      group: function group() {\n        return this.put(new SVG.G());\n      }\n    }\n  });\n  SVG.Doc = SVG.invent({\n    // Initialize node\n    create: function create(element) {\n      if (element) {\n        // ensure the presence of a dom element\n        element = typeof element == 'string' ? document.getElementById(element) : element; // If the target is an svg element, use that element as the main wrapper.\n        // This allows svg.js to work with svg documents as well.\n\n        if (element.nodeName == 'svg') {\n          this.constructor.call(this, element);\n        } else {\n          this.constructor.call(this, SVG.create('svg'));\n          element.appendChild(this.node);\n          this.size('100%', '100%');\n        } // set svg element attributes and ensure defs node\n\n\n        this.namespace().defs();\n      }\n    } // Inherit from\n    ,\n    inherit: SVG.Container // Add class methods\n    ,\n    extend: {\n      // Add namespaces\n      namespace: function namespace() {\n        return this.attr({\n          xmlns: SVG.ns,\n          version: '1.1'\n        }).attr('xmlns:xlink', SVG.xlink, SVG.xmlns).attr('xmlns:svgjs', SVG.svgjs, SVG.xmlns);\n      } // Creates and returns defs element\n      ,\n      defs: function defs() {\n        if (!this._defs) {\n          var defs; // Find or create a defs element in this instance\n\n          if (defs = this.node.getElementsByTagName('defs')[0]) this._defs = SVG.adopt(defs);else this._defs = new SVG.Defs(); // Make sure the defs node is at the end of the stack\n\n          this.node.appendChild(this._defs.node);\n        }\n\n        return this._defs;\n      } // custom parent method\n      ,\n      parent: function parent() {\n        if (!this.node.parentNode || this.node.parentNode.nodeName == '#document' || this.node.parentNode.nodeName == '#document-fragment') return null;\n        return this.node.parentNode;\n      } // Fix for possible sub-pixel offset. See:\n      // https://bugzilla.mozilla.org/show_bug.cgi?id=608812\n      ,\n      spof: function spof() {\n        var pos = this.node.getScreenCTM();\n        if (pos) this.style('left', -pos.e % 1 + 'px').style('top', -pos.f % 1 + 'px');\n        return this;\n      } // Removes the doc from the DOM\n      ,\n      remove: function remove() {\n        if (this.parent()) {\n          this.parent().removeChild(this.node);\n        }\n\n        return this;\n      },\n      clear: function clear() {\n        // remove children\n        while (this.node.hasChildNodes()) {\n          this.node.removeChild(this.node.lastChild);\n        } // remove defs reference\n\n\n        delete this._defs; // add back parser\n\n        if (!SVG.parser.draw.parentNode) this.node.appendChild(SVG.parser.draw);\n        return this;\n      },\n      clone: function clone(parent) {\n        // write dom data to the dom so the clone can pickup the data\n        this.writeDataToDom(); // get reference to node\n\n        var node = this.node; // clone element and assign new id\n\n        var clone = assignNewId(node.cloneNode(true)); // insert the clone in the given parent or after myself\n\n        if (parent) {\n          (parent.node || parent).appendChild(clone.node);\n        } else {\n          node.parentNode.insertBefore(clone.node, node.nextSibling);\n        }\n\n        return clone;\n      }\n    }\n  }); // ### This module adds backward / forward functionality to elements.\n  //\n\n  SVG.extend(SVG.Element, {\n    // Get all siblings, including myself\n    siblings: function siblings() {\n      return this.parent().children();\n    } // Get the curent position siblings\n    ,\n    position: function position() {\n      return this.parent().index(this);\n    } // Get the next element (will return null if there is none)\n    ,\n    next: function next() {\n      return this.siblings()[this.position() + 1];\n    } // Get the next element (will return null if there is none)\n    ,\n    previous: function previous() {\n      return this.siblings()[this.position() - 1];\n    } // Send given element one step forward\n    ,\n    forward: function forward() {\n      var i = this.position() + 1,\n          p = this.parent(); // move node one step forward\n\n      p.removeElement(this).add(this, i); // make sure defs node is always at the top\n\n      if (p instanceof SVG.Doc) p.node.appendChild(p.defs().node);\n      return this;\n    } // Send given element one step backward\n    ,\n    backward: function backward() {\n      var i = this.position();\n      if (i > 0) this.parent().removeElement(this).add(this, i - 1);\n      return this;\n    } // Send given element all the way to the front\n    ,\n    front: function front() {\n      var p = this.parent(); // Move node forward\n\n      p.node.appendChild(this.node); // Make sure defs node is always at the top\n\n      if (p instanceof SVG.Doc) p.node.appendChild(p.defs().node);\n      return this;\n    } // Send given element all the way to the back\n    ,\n    back: function back() {\n      if (this.position() > 0) this.parent().removeElement(this).add(this, 0);\n      return this;\n    } // Inserts a given element before the targeted element\n    ,\n    before: function before(element) {\n      element.remove();\n      var i = this.position();\n      this.parent().add(element, i);\n      return this;\n    } // Insters a given element after the targeted element\n    ,\n    after: function after(element) {\n      element.remove();\n      var i = this.position();\n      this.parent().add(element, i + 1);\n      return this;\n    }\n  });\n  SVG.Mask = SVG.invent({\n    // Initialize node\n    create: function create() {\n      this.constructor.call(this, SVG.create('mask')); // keep references to masked elements\n\n      this.targets = [];\n    } // Inherit from\n    ,\n    inherit: SVG.Container // Add class methods\n    ,\n    extend: {\n      // Unmask all masked elements and remove itself\n      remove: function remove() {\n        // unmask all targets\n        for (var i = this.targets.length - 1; i >= 0; i--) {\n          if (this.targets[i]) this.targets[i].unmask();\n        }\n\n        this.targets = []; // remove mask from parent\n\n        SVG.Element.prototype.remove.call(this);\n        return this;\n      }\n    } // Add parent method\n    ,\n    construct: {\n      // Create masking element\n      mask: function mask() {\n        return this.defs().put(new SVG.Mask());\n      }\n    }\n  });\n  SVG.extend(SVG.Element, {\n    // Distribute mask to svg element\n    maskWith: function maskWith(element) {\n      // use given mask or create a new one\n      this.masker = element instanceof SVG.Mask ? element : this.parent().mask().add(element); // store reverence on self in mask\n\n      this.masker.targets.push(this); // apply mask\n\n      return this.attr('mask', 'url(\"#' + this.masker.attr('id') + '\")');\n    } // Unmask element\n    ,\n    unmask: function unmask() {\n      delete this.masker;\n      return this.attr('mask', null);\n    }\n  });\n  SVG.ClipPath = SVG.invent({\n    // Initialize node\n    create: function create() {\n      this.constructor.call(this, SVG.create('clipPath')); // keep references to clipped elements\n\n      this.targets = [];\n    } // Inherit from\n    ,\n    inherit: SVG.Container // Add class methods\n    ,\n    extend: {\n      // Unclip all clipped elements and remove itself\n      remove: function remove() {\n        // unclip all targets\n        for (var i = this.targets.length - 1; i >= 0; i--) {\n          if (this.targets[i]) this.targets[i].unclip();\n        }\n\n        this.targets = []; // remove clipPath from parent\n\n        this.parent().removeElement(this);\n        return this;\n      }\n    } // Add parent method\n    ,\n    construct: {\n      // Create clipping element\n      clip: function clip() {\n        return this.defs().put(new SVG.ClipPath());\n      }\n    }\n  }); //\n\n  SVG.extend(SVG.Element, {\n    // Distribute clipPath to svg element\n    clipWith: function clipWith(element) {\n      // use given clip or create a new one\n      this.clipper = element instanceof SVG.ClipPath ? element : this.parent().clip().add(element); // store reverence on self in mask\n\n      this.clipper.targets.push(this); // apply mask\n\n      return this.attr('clip-path', 'url(\"#' + this.clipper.attr('id') + '\")');\n    } // Unclip element\n    ,\n    unclip: function unclip() {\n      delete this.clipper;\n      return this.attr('clip-path', null);\n    }\n  });\n  SVG.Gradient = SVG.invent({\n    // Initialize node\n    create: function create(type) {\n      this.constructor.call(this, SVG.create(type + 'Gradient')); // store type\n\n      this.type = type;\n    } // Inherit from\n    ,\n    inherit: SVG.Container // Add class methods\n    ,\n    extend: {\n      // Add a color stop\n      at: function at(offset, color, opacity) {\n        return this.put(new SVG.Stop()).update(offset, color, opacity);\n      } // Update gradient\n      ,\n      update: function update(block) {\n        // remove all stops\n        this.clear(); // invoke passed block\n\n        if (typeof block == 'function') block.call(this, this);\n        return this;\n      } // Return the fill id\n      ,\n      fill: function fill() {\n        return 'url(#' + this.id() + ')';\n      } // Alias string convertion to fill\n      ,\n      toString: function toString() {\n        return this.fill();\n      } // custom attr to handle transform\n      ,\n      attr: function attr(a, b, c) {\n        if (a == 'transform') a = 'gradientTransform';\n        return SVG.Container.prototype.attr.call(this, a, b, c);\n      }\n    } // Add parent method\n    ,\n    construct: {\n      // Create gradient element in defs\n      gradient: function gradient(type, block) {\n        return this.defs().gradient(type, block);\n      }\n    }\n  }); // Add animatable methods to both gradient and fx module\n\n  SVG.extend(SVG.Gradient, SVG.FX, {\n    // From position\n    from: function from(x, y) {\n      return (this._target || this).type == 'radial' ? this.attr({\n        fx: new SVG.Number(x),\n        fy: new SVG.Number(y)\n      }) : this.attr({\n        x1: new SVG.Number(x),\n        y1: new SVG.Number(y)\n      });\n    } // To position\n    ,\n    to: function to(x, y) {\n      return (this._target || this).type == 'radial' ? this.attr({\n        cx: new SVG.Number(x),\n        cy: new SVG.Number(y)\n      }) : this.attr({\n        x2: new SVG.Number(x),\n        y2: new SVG.Number(y)\n      });\n    }\n  }); // Base gradient generation\n\n  SVG.extend(SVG.Defs, {\n    // define gradient\n    gradient: function gradient(type, block) {\n      return this.put(new SVG.Gradient(type)).update(block);\n    }\n  });\n  SVG.Stop = SVG.invent({\n    // Initialize node\n    create: 'stop' // Inherit from\n    ,\n    inherit: SVG.Element // Add class methods\n    ,\n    extend: {\n      // add color stops\n      update: function update(o) {\n        if (typeof o == 'number' || o instanceof SVG.Number) {\n          o = {\n            offset: arguments[0],\n            color: arguments[1],\n            opacity: arguments[2]\n          };\n        } // set attributes\n\n\n        if (o.opacity != null) this.attr('stop-opacity', o.opacity);\n        if (o.color != null) this.attr('stop-color', o.color);\n        if (o.offset != null) this.attr('offset', new SVG.Number(o.offset));\n        return this;\n      }\n    }\n  });\n  SVG.Pattern = SVG.invent({\n    // Initialize node\n    create: 'pattern' // Inherit from\n    ,\n    inherit: SVG.Container // Add class methods\n    ,\n    extend: {\n      // Return the fill id\n      fill: function fill() {\n        return 'url(#' + this.id() + ')';\n      } // Update pattern by rebuilding\n      ,\n      update: function update(block) {\n        // remove content\n        this.clear(); // invoke passed block\n\n        if (typeof block == 'function') block.call(this, this);\n        return this;\n      } // Alias string convertion to fill\n      ,\n      toString: function toString() {\n        return this.fill();\n      } // custom attr to handle transform\n      ,\n      attr: function attr(a, b, c) {\n        if (a == 'transform') a = 'patternTransform';\n        return SVG.Container.prototype.attr.call(this, a, b, c);\n      }\n    } // Add parent method\n    ,\n    construct: {\n      // Create pattern element in defs\n      pattern: function pattern(width, height, block) {\n        return this.defs().pattern(width, height, block);\n      }\n    }\n  });\n  SVG.extend(SVG.Defs, {\n    // Define gradient\n    pattern: function pattern(width, height, block) {\n      return this.put(new SVG.Pattern()).update(block).attr({\n        x: 0,\n        y: 0,\n        width: width,\n        height: height,\n        patternUnits: 'userSpaceOnUse'\n      });\n    }\n  });\n  SVG.Shape = SVG.invent({\n    // Initialize node\n    create: function create(element) {\n      this.constructor.call(this, element);\n    } // Inherit from\n    ,\n    inherit: SVG.Element\n  });\n  SVG.Bare = SVG.invent({\n    // Initialize\n    create: function create(element, inherit) {\n      // construct element\n      this.constructor.call(this, SVG.create(element)); // inherit custom methods\n\n      if (inherit) for (var method in inherit.prototype) {\n        if (typeof inherit.prototype[method] === 'function') this[method] = inherit.prototype[method];\n      }\n    } // Inherit from\n    ,\n    inherit: SVG.Element // Add methods\n    ,\n    extend: {\n      // Insert some plain text\n      words: function words(text) {\n        // remove contents\n        while (this.node.hasChildNodes()) {\n          this.node.removeChild(this.node.lastChild);\n        } // create text node\n\n\n        this.node.appendChild(document.createTextNode(text));\n        return this;\n      }\n    }\n  });\n  SVG.extend(SVG.Parent, {\n    // Create an element that is not described by SVG.js\n    element: function element(_element, inherit) {\n      return this.put(new SVG.Bare(_element, inherit));\n    }\n  });\n  SVG.Symbol = SVG.invent({\n    // Initialize node\n    create: 'symbol' // Inherit from\n    ,\n    inherit: SVG.Container,\n    construct: {\n      // create symbol\n      symbol: function symbol() {\n        return this.put(new SVG.Symbol());\n      }\n    }\n  });\n  SVG.Use = SVG.invent({\n    // Initialize node\n    create: 'use' // Inherit from\n    ,\n    inherit: SVG.Shape // Add class methods\n    ,\n    extend: {\n      // Use element as a reference\n      element: function element(_element2, file) {\n        // Set lined element\n        return this.attr('href', (file || '') + '#' + _element2, SVG.xlink);\n      }\n    } // Add parent method\n    ,\n    construct: {\n      // Create a use element\n      use: function use(element, file) {\n        return this.put(new SVG.Use()).element(element, file);\n      }\n    }\n  });\n  SVG.Rect = SVG.invent({\n    // Initialize node\n    create: 'rect' // Inherit from\n    ,\n    inherit: SVG.Shape // Add parent method\n    ,\n    construct: {\n      // Create a rect element\n      rect: function rect(width, height) {\n        return this.put(new SVG.Rect()).size(width, height);\n      }\n    }\n  });\n  SVG.Circle = SVG.invent({\n    // Initialize node\n    create: 'circle' // Inherit from\n    ,\n    inherit: SVG.Shape // Add parent method\n    ,\n    construct: {\n      // Create circle element, based on ellipse\n      circle: function circle(size) {\n        return this.put(new SVG.Circle()).rx(new SVG.Number(size).divide(2)).move(0, 0);\n      }\n    }\n  });\n  SVG.extend(SVG.Circle, SVG.FX, {\n    // Radius x value\n    rx: function rx(_rx) {\n      return this.attr('r', _rx);\n    } // Alias radius x value\n    ,\n    ry: function ry(_ry) {\n      return this.rx(_ry);\n    }\n  });\n  SVG.Ellipse = SVG.invent({\n    // Initialize node\n    create: 'ellipse' // Inherit from\n    ,\n    inherit: SVG.Shape // Add parent method\n    ,\n    construct: {\n      // Create an ellipse\n      ellipse: function ellipse(width, height) {\n        return this.put(new SVG.Ellipse()).size(width, height).move(0, 0);\n      }\n    }\n  });\n  SVG.extend(SVG.Ellipse, SVG.Rect, SVG.FX, {\n    // Radius x value\n    rx: function rx(_rx2) {\n      return this.attr('rx', _rx2);\n    } // Radius y value\n    ,\n    ry: function ry(_ry2) {\n      return this.attr('ry', _ry2);\n    }\n  }); // Add common method\n\n  SVG.extend(SVG.Circle, SVG.Ellipse, {\n    // Move over x-axis\n    x: function x(_x4) {\n      return _x4 == null ? this.cx() - this.rx() : this.cx(_x4 + this.rx());\n    } // Move over y-axis\n    ,\n    y: function y(_y4) {\n      return _y4 == null ? this.cy() - this.ry() : this.cy(_y4 + this.ry());\n    } // Move by center over x-axis\n    ,\n    cx: function cx(x) {\n      return x == null ? this.attr('cx') : this.attr('cx', x);\n    } // Move by center over y-axis\n    ,\n    cy: function cy(y) {\n      return y == null ? this.attr('cy') : this.attr('cy', y);\n    } // Set width of element\n    ,\n    width: function width(_width3) {\n      return _width3 == null ? this.rx() * 2 : this.rx(new SVG.Number(_width3).divide(2));\n    } // Set height of element\n    ,\n    height: function height(_height3) {\n      return _height3 == null ? this.ry() * 2 : this.ry(new SVG.Number(_height3).divide(2));\n    } // Custom size function\n    ,\n    size: function size(width, height) {\n      var p = proportionalSize(this, width, height);\n      return this.rx(new SVG.Number(p.width).divide(2)).ry(new SVG.Number(p.height).divide(2));\n    }\n  });\n  SVG.Line = SVG.invent({\n    // Initialize node\n    create: 'line' // Inherit from\n    ,\n    inherit: SVG.Shape // Add class methods\n    ,\n    extend: {\n      // Get array\n      array: function array() {\n        return new SVG.PointArray([[this.attr('x1'), this.attr('y1')], [this.attr('x2'), this.attr('y2')]]);\n      } // Overwrite native plot() method\n      ,\n      plot: function plot(x1, y1, x2, y2) {\n        if (x1 == null) return this.array();else if (typeof y1 !== 'undefined') x1 = {\n          x1: x1,\n          y1: y1,\n          x2: x2,\n          y2: y2\n        };else x1 = new SVG.PointArray(x1).toLine();\n        return this.attr(x1);\n      } // Move by left top corner\n      ,\n      move: function move(x, y) {\n        return this.attr(this.array().move(x, y).toLine());\n      } // Set element size to given width and height\n      ,\n      size: function size(width, height) {\n        var p = proportionalSize(this, width, height);\n        return this.attr(this.array().size(p.width, p.height).toLine());\n      }\n    } // Add parent method\n    ,\n    construct: {\n      // Create a line element\n      line: function line(x1, y1, x2, y2) {\n        // make sure plot is called as a setter\n        // x1 is not necessarily a number, it can also be an array, a string and a SVG.PointArray\n        return SVG.Line.prototype.plot.apply(this.put(new SVG.Line()), x1 != null ? [x1, y1, x2, y2] : [0, 0, 0, 0]);\n      }\n    }\n  });\n  SVG.Polyline = SVG.invent({\n    // Initialize node\n    create: 'polyline' // Inherit from\n    ,\n    inherit: SVG.Shape // Add parent method\n    ,\n    construct: {\n      // Create a wrapped polyline element\n      polyline: function polyline(p) {\n        // make sure plot is called as a setter\n        return this.put(new SVG.Polyline()).plot(p || new SVG.PointArray());\n      }\n    }\n  });\n  SVG.Polygon = SVG.invent({\n    // Initialize node\n    create: 'polygon' // Inherit from\n    ,\n    inherit: SVG.Shape // Add parent method\n    ,\n    construct: {\n      // Create a wrapped polygon element\n      polygon: function polygon(p) {\n        // make sure plot is called as a setter\n        return this.put(new SVG.Polygon()).plot(p || new SVG.PointArray());\n      }\n    }\n  }); // Add polygon-specific functions\n\n  SVG.extend(SVG.Polyline, SVG.Polygon, {\n    // Get array\n    array: function array() {\n      return this._array || (this._array = new SVG.PointArray(this.attr('points')));\n    } // Plot new path\n    ,\n    plot: function plot(p) {\n      return p == null ? this.array() : this.clear().attr('points', typeof p == 'string' ? p : this._array = new SVG.PointArray(p));\n    } // Clear array cache\n    ,\n    clear: function clear() {\n      delete this._array;\n      return this;\n    } // Move by left top corner\n    ,\n    move: function move(x, y) {\n      return this.attr('points', this.array().move(x, y));\n    } // Set element size to given width and height\n    ,\n    size: function size(width, height) {\n      var p = proportionalSize(this, width, height);\n      return this.attr('points', this.array().size(p.width, p.height));\n    }\n  }); // unify all point to point elements\n\n  SVG.extend(SVG.Line, SVG.Polyline, SVG.Polygon, {\n    // Define morphable array\n    morphArray: SVG.PointArray // Move by left top corner over x-axis\n    ,\n    x: function x(_x5) {\n      return _x5 == null ? this.bbox().x : this.move(_x5, this.bbox().y);\n    } // Move by left top corner over y-axis\n    ,\n    y: function y(_y5) {\n      return _y5 == null ? this.bbox().y : this.move(this.bbox().x, _y5);\n    } // Set width of element\n    ,\n    width: function width(_width4) {\n      var b = this.bbox();\n      return _width4 == null ? b.width : this.size(_width4, b.height);\n    } // Set height of element\n    ,\n    height: function height(_height4) {\n      var b = this.bbox();\n      return _height4 == null ? b.height : this.size(b.width, _height4);\n    }\n  });\n  SVG.Path = SVG.invent({\n    // Initialize node\n    create: 'path' // Inherit from\n    ,\n    inherit: SVG.Shape // Add class methods\n    ,\n    extend: {\n      // Define morphable array\n      morphArray: SVG.PathArray // Get array\n      ,\n      array: function array() {\n        return this._array || (this._array = new SVG.PathArray(this.attr('d')));\n      } // Plot new path\n      ,\n      plot: function plot(d) {\n        return d == null ? this.array() : this.clear().attr('d', typeof d == 'string' ? d : this._array = new SVG.PathArray(d));\n      } // Clear array cache\n      ,\n      clear: function clear() {\n        delete this._array;\n        return this;\n      } // Move by left top corner\n      ,\n      move: function move(x, y) {\n        return this.attr('d', this.array().move(x, y));\n      } // Move by left top corner over x-axis\n      ,\n      x: function x(_x6) {\n        return _x6 == null ? this.bbox().x : this.move(_x6, this.bbox().y);\n      } // Move by left top corner over y-axis\n      ,\n      y: function y(_y6) {\n        return _y6 == null ? this.bbox().y : this.move(this.bbox().x, _y6);\n      } // Set element size to given width and height\n      ,\n      size: function size(width, height) {\n        var p = proportionalSize(this, width, height);\n        return this.attr('d', this.array().size(p.width, p.height));\n      } // Set width of element\n      ,\n      width: function width(_width5) {\n        return _width5 == null ? this.bbox().width : this.size(_width5, this.bbox().height);\n      } // Set height of element\n      ,\n      height: function height(_height5) {\n        return _height5 == null ? this.bbox().height : this.size(this.bbox().width, _height5);\n      }\n    } // Add parent method\n    ,\n    construct: {\n      // Create a wrapped path element\n      path: function path(d) {\n        // make sure plot is called as a setter\n        return this.put(new SVG.Path()).plot(d || new SVG.PathArray());\n      }\n    }\n  });\n  SVG.Image = SVG.invent({\n    // Initialize node\n    create: 'image' // Inherit from\n    ,\n    inherit: SVG.Shape // Add class methods\n    ,\n    extend: {\n      // (re)load image\n      load: function load(url) {\n        if (!url) return this;\n        var self = this,\n            img = new window.Image(); // preload image\n\n        SVG.on(img, 'load', function () {\n          SVG.off(img);\n          var p = self.parent(SVG.Pattern);\n          if (p === null) return; // ensure image size\n\n          if (self.width() == 0 && self.height() == 0) self.size(img.width, img.height); // ensure pattern size if not set\n\n          if (p && p.width() == 0 && p.height() == 0) p.size(self.width(), self.height()); // callback\n\n          if (typeof self._loaded === 'function') self._loaded.call(self, {\n            width: img.width,\n            height: img.height,\n            ratio: img.width / img.height,\n            url: url\n          });\n        });\n        SVG.on(img, 'error', function (e) {\n          SVG.off(img);\n\n          if (typeof self._error === 'function') {\n            self._error.call(self, e);\n          }\n        });\n        return this.attr('href', img.src = this.src = url, SVG.xlink);\n      } // Add loaded callback\n      ,\n      loaded: function loaded(_loaded) {\n        this._loaded = _loaded;\n        return this;\n      },\n      error: function error(_error) {\n        this._error = _error;\n        return this;\n      }\n    } // Add parent method\n    ,\n    construct: {\n      // create image element, load image and set its size\n      image: function image(source, width, height) {\n        return this.put(new SVG.Image()).load(source).size(width || 0, height || width || 0);\n      }\n    }\n  });\n  SVG.Text = SVG.invent({\n    // Initialize node\n    create: function create() {\n      this.constructor.call(this, SVG.create('text'));\n      this.dom.leading = new SVG.Number(1.3); // store leading value for rebuilding\n\n      this._rebuild = true; // enable automatic updating of dy values\n\n      this._build = false; // disable build mode for adding multiple lines\n      // set default font\n\n      this.attr('font-family', SVG.defaults.attrs['font-family']);\n    } // Inherit from\n    ,\n    inherit: SVG.Shape // Add class methods\n    ,\n    extend: {\n      // Move over x-axis\n      x: function x(_x7) {\n        // act as getter\n        if (_x7 == null) return this.attr('x');\n        return this.attr('x', _x7);\n      } // Move over y-axis\n      ,\n      y: function y(_y7) {\n        var oy = this.attr('y'),\n            o = typeof oy === 'number' ? oy - this.bbox().y : 0; // act as getter\n\n        if (_y7 == null) return typeof oy === 'number' ? oy - o : oy;\n        return this.attr('y', typeof _y7.valueOf() === 'number' ? _y7 + o : _y7);\n      } // Move center over x-axis\n      ,\n      cx: function cx(x) {\n        return x == null ? this.bbox().cx : this.x(x - this.bbox().width / 2);\n      } // Move center over y-axis\n      ,\n      cy: function cy(y) {\n        return y == null ? this.bbox().cy : this.y(y - this.bbox().height / 2);\n      } // Set the text content\n      ,\n      text: function text(_text) {\n        // act as getter\n        if (typeof _text === 'undefined') {\n          var _text = '';\n          var children = this.node.childNodes;\n\n          for (var i = 0, len = children.length; i < len; ++i) {\n            // add newline if its not the first child and newLined is set to true\n            if (i != 0 && children[i].nodeType != 3 && SVG.adopt(children[i]).dom.newLined == true) {\n              _text += '\\n';\n            } // add content of this node\n\n\n            _text += children[i].textContent;\n          }\n\n          return _text;\n        } // remove existing content\n\n\n        this.clear().build(true);\n\n        if (typeof _text === 'function') {\n          // call block\n          _text.call(this, this);\n        } else {\n          // store text and make sure text is not blank\n          _text = _text.split('\\n'); // build new lines\n\n          for (var i = 0, il = _text.length; i < il; i++) {\n            this.tspan(_text[i]).newLine();\n          }\n        } // disable build mode and rebuild lines\n\n\n        return this.build(false).rebuild();\n      } // Set font size\n      ,\n      size: function size(_size) {\n        return this.attr('font-size', _size).rebuild();\n      } // Set / get leading\n      ,\n      leading: function leading(value) {\n        // act as getter\n        if (value == null) return this.dom.leading; // act as setter\n\n        this.dom.leading = new SVG.Number(value);\n        return this.rebuild();\n      } // Get all the first level lines\n      ,\n      lines: function lines() {\n        var node = (this.textPath && this.textPath() || this).node; // filter tspans and map them to SVG.js instances\n\n        var lines = SVG.utils.map(SVG.utils.filterSVGElements(node.childNodes), function (el) {\n          return SVG.adopt(el);\n        }); // return an instance of SVG.set\n\n        return new SVG.Set(lines);\n      } // Rebuild appearance type\n      ,\n      rebuild: function rebuild(_rebuild) {\n        // store new rebuild flag if given\n        if (typeof _rebuild == 'boolean') this._rebuild = _rebuild; // define position of all lines\n\n        if (this._rebuild) {\n          var self = this,\n              blankLineOffset = 0,\n              dy = this.dom.leading * new SVG.Number(this.attr('font-size'));\n          this.lines().each(function () {\n            if (this.dom.newLined) {\n              if (!self.textPath()) this.attr('x', self.attr('x'));\n\n              if (this.text() == '\\n') {\n                blankLineOffset += dy;\n              } else {\n                this.attr('dy', dy + blankLineOffset);\n                blankLineOffset = 0;\n              }\n            }\n          });\n          this.fire('rebuild');\n        }\n\n        return this;\n      } // Enable / disable build mode\n      ,\n      build: function build(_build) {\n        this._build = !!_build;\n        return this;\n      } // overwrite method from parent to set data properly\n      ,\n      setData: function setData(o) {\n        this.dom = o;\n        this.dom.leading = new SVG.Number(o.leading || 1.3);\n        return this;\n      }\n    } // Add parent method\n    ,\n    construct: {\n      // Create text element\n      text: function text(_text2) {\n        return this.put(new SVG.Text()).text(_text2);\n      } // Create plain text element\n      ,\n      plain: function plain(text) {\n        return this.put(new SVG.Text()).plain(text);\n      }\n    }\n  });\n  SVG.Tspan = SVG.invent({\n    // Initialize node\n    create: 'tspan' // Inherit from\n    ,\n    inherit: SVG.Shape // Add class methods\n    ,\n    extend: {\n      // Set text content\n      text: function text(_text3) {\n        if (_text3 == null) return this.node.textContent + (this.dom.newLined ? '\\n' : '');\n        typeof _text3 === 'function' ? _text3.call(this, this) : this.plain(_text3);\n        return this;\n      } // Shortcut dx\n      ,\n      dx: function dx(_dx) {\n        return this.attr('dx', _dx);\n      } // Shortcut dy\n      ,\n      dy: function dy(_dy) {\n        return this.attr('dy', _dy);\n      } // Create new line\n      ,\n      newLine: function newLine() {\n        // fetch text parent\n        var t = this.parent(SVG.Text); // mark new line\n\n        this.dom.newLined = true; // apply new hy¡n\n\n        return this.dy(t.dom.leading * t.attr('font-size')).attr('x', t.x());\n      }\n    }\n  });\n  SVG.extend(SVG.Text, SVG.Tspan, {\n    // Create plain text node\n    plain: function plain(text) {\n      // clear if build mode is disabled\n      if (this._build === false) this.clear(); // create text node\n\n      this.node.appendChild(document.createTextNode(text));\n      return this;\n    } // Create a tspan\n    ,\n    tspan: function tspan(text) {\n      var node = (this.textPath && this.textPath() || this).node,\n          tspan = new SVG.Tspan(); // clear if build mode is disabled\n\n      if (this._build === false) this.clear(); // add new tspan\n\n      node.appendChild(tspan.node);\n      return tspan.text(text);\n    } // Clear all lines\n    ,\n    clear: function clear() {\n      var node = (this.textPath && this.textPath() || this).node; // remove existing child nodes\n\n      while (node.hasChildNodes()) {\n        node.removeChild(node.lastChild);\n      }\n\n      return this;\n    } // Get length of text element\n    ,\n    length: function length() {\n      return this.node.getComputedTextLength();\n    }\n  });\n  SVG.TextPath = SVG.invent({\n    // Initialize node\n    create: 'textPath' // Inherit from\n    ,\n    inherit: SVG.Parent // Define parent class\n    ,\n    parent: SVG.Text // Add parent method\n    ,\n    construct: {\n      morphArray: SVG.PathArray // Create path for text to run on\n      ,\n      path: function path(d) {\n        // create textPath element\n        var path = new SVG.TextPath(),\n            track = this.doc().defs().path(d); // move lines to textpath\n\n        while (this.node.hasChildNodes()) {\n          path.node.appendChild(this.node.firstChild);\n        } // add textPath element as child node\n\n\n        this.node.appendChild(path.node); // link textPath to path and add content\n\n        path.attr('href', '#' + track, SVG.xlink);\n        return this;\n      } // return the array of the path track element\n      ,\n      array: function array() {\n        var track = this.track();\n        return track ? track.array() : null;\n      } // Plot path if any\n      ,\n      plot: function plot(d) {\n        var track = this.track(),\n            pathArray = null;\n\n        if (track) {\n          pathArray = track.plot(d);\n        }\n\n        return d == null ? pathArray : this;\n      } // Get the path track element\n      ,\n      track: function track() {\n        var path = this.textPath();\n        if (path) return path.reference('href');\n      } // Get the textPath child\n      ,\n      textPath: function textPath() {\n        if (this.node.firstChild && this.node.firstChild.nodeName == 'textPath') return SVG.adopt(this.node.firstChild);\n      }\n    }\n  });\n  SVG.Nested = SVG.invent({\n    // Initialize node\n    create: function create() {\n      this.constructor.call(this, SVG.create('svg'));\n      this.style('overflow', 'visible');\n    } // Inherit from\n    ,\n    inherit: SVG.Container // Add parent method\n    ,\n    construct: {\n      // Create nested svg document\n      nested: function nested() {\n        return this.put(new SVG.Nested());\n      }\n    }\n  });\n  SVG.A = SVG.invent({\n    // Initialize node\n    create: 'a' // Inherit from\n    ,\n    inherit: SVG.Container // Add class methods\n    ,\n    extend: {\n      // Link url\n      to: function to(url) {\n        return this.attr('href', url, SVG.xlink);\n      } // Link show attribute\n      ,\n      show: function show(target) {\n        return this.attr('show', target, SVG.xlink);\n      } // Link target attribute\n      ,\n      target: function target(_target2) {\n        return this.attr('target', _target2);\n      }\n    } // Add parent method\n    ,\n    construct: {\n      // Create a hyperlink element\n      link: function link(url) {\n        return this.put(new SVG.A()).to(url);\n      }\n    }\n  });\n  SVG.extend(SVG.Element, {\n    // Create a hyperlink element\n    linkTo: function linkTo(url) {\n      var link = new SVG.A();\n      if (typeof url == 'function') url.call(link, link);else link.to(url);\n      return this.parent().put(link).put(this);\n    }\n  });\n  SVG.Marker = SVG.invent({\n    // Initialize node\n    create: 'marker' // Inherit from\n    ,\n    inherit: SVG.Container // Add class methods\n    ,\n    extend: {\n      // Set width of element\n      width: function width(_width6) {\n        return this.attr('markerWidth', _width6);\n      } // Set height of element\n      ,\n      height: function height(_height6) {\n        return this.attr('markerHeight', _height6);\n      } // Set marker refX and refY\n      ,\n      ref: function ref(x, y) {\n        return this.attr('refX', x).attr('refY', y);\n      } // Update marker\n      ,\n      update: function update(block) {\n        // remove all content\n        this.clear(); // invoke passed block\n\n        if (typeof block == 'function') block.call(this, this);\n        return this;\n      } // Return the fill id\n      ,\n      toString: function toString() {\n        return 'url(#' + this.id() + ')';\n      }\n    } // Add parent method\n    ,\n    construct: {\n      marker: function marker(width, height, block) {\n        // Create marker element in defs\n        return this.defs().marker(width, height, block);\n      }\n    }\n  });\n  SVG.extend(SVG.Defs, {\n    // Create marker\n    marker: function marker(width, height, block) {\n      // Set default viewbox to match the width and height, set ref to cx and cy and set orient to auto\n      return this.put(new SVG.Marker()).size(width, height).ref(width / 2, height / 2).viewbox(0, 0, width, height).attr('orient', 'auto').update(block);\n    }\n  });\n  SVG.extend(SVG.Line, SVG.Polyline, SVG.Polygon, SVG.Path, {\n    // Create and attach markers\n    marker: function marker(_marker, width, height, block) {\n      var attr = ['marker']; // Build attribute name\n\n      if (_marker != 'all') attr.push(_marker);\n      attr = attr.join('-'); // Set marker attribute\n\n      _marker = arguments[1] instanceof SVG.Marker ? arguments[1] : this.doc().marker(width, height, block);\n      return this.attr(attr, _marker);\n    }\n  }); // Define list of available attributes for stroke and fill\n\n  var sugar = {\n    stroke: ['color', 'width', 'opacity', 'linecap', 'linejoin', 'miterlimit', 'dasharray', 'dashoffset'],\n    fill: ['color', 'opacity', 'rule'],\n    prefix: function prefix(t, a) {\n      return a == 'color' ? t : t + '-' + a;\n    }\n  } // Add sugar for fill and stroke\n  ;\n  ['fill', 'stroke'].forEach(function (m) {\n    var i,\n        extension = {};\n\n    extension[m] = function (o) {\n      if (typeof o == 'undefined') return this;\n      if (typeof o == 'string' || SVG.Color.isRgb(o) || o && typeof o.fill === 'function') this.attr(m, o);else // set all attributes from sugar.fill and sugar.stroke list\n        for (i = sugar[m].length - 1; i >= 0; i--) {\n          if (o[sugar[m][i]] != null) this.attr(sugar.prefix(m, sugar[m][i]), o[sugar[m][i]]);\n        }\n      return this;\n    };\n\n    SVG.extend(SVG.Element, SVG.FX, extension);\n  });\n  SVG.extend(SVG.Element, SVG.FX, {\n    // Map rotation to transform\n    rotate: function rotate(d, cx, cy) {\n      return this.transform({\n        rotation: d,\n        cx: cx,\n        cy: cy\n      });\n    } // Map skew to transform\n    ,\n    skew: function skew(x, y, cx, cy) {\n      return arguments.length == 1 || arguments.length == 3 ? this.transform({\n        skew: x,\n        cx: y,\n        cy: cx\n      }) : this.transform({\n        skewX: x,\n        skewY: y,\n        cx: cx,\n        cy: cy\n      });\n    } // Map scale to transform\n    ,\n    scale: function scale(x, y, cx, cy) {\n      return arguments.length == 1 || arguments.length == 3 ? this.transform({\n        scale: x,\n        cx: y,\n        cy: cx\n      }) : this.transform({\n        scaleX: x,\n        scaleY: y,\n        cx: cx,\n        cy: cy\n      });\n    } // Map translate to transform\n    ,\n    translate: function translate(x, y) {\n      return this.transform({\n        x: x,\n        y: y\n      });\n    } // Map flip to transform\n    ,\n    flip: function flip(a, o) {\n      o = typeof a == 'number' ? a : o;\n      return this.transform({\n        flip: a || 'both',\n        offset: o\n      });\n    } // Map matrix to transform\n    ,\n    matrix: function matrix(m) {\n      return this.attr('transform', new SVG.Matrix(arguments.length == 6 ? [].slice.call(arguments) : m));\n    } // Opacity\n    ,\n    opacity: function opacity(value) {\n      return this.attr('opacity', value);\n    } // Relative move over x axis\n    ,\n    dx: function dx(x) {\n      return this.x(new SVG.Number(x).plus(this instanceof SVG.FX ? 0 : this.x()), true);\n    } // Relative move over y axis\n    ,\n    dy: function dy(y) {\n      return this.y(new SVG.Number(y).plus(this instanceof SVG.FX ? 0 : this.y()), true);\n    } // Relative move over x and y axes\n    ,\n    dmove: function dmove(x, y) {\n      return this.dx(x).dy(y);\n    }\n  });\n  SVG.extend(SVG.Rect, SVG.Ellipse, SVG.Circle, SVG.Gradient, SVG.FX, {\n    // Add x and y radius\n    radius: function radius(x, y) {\n      var type = (this._target || this).type;\n      return type == 'radial' || type == 'circle' ? this.attr('r', new SVG.Number(x)) : this.rx(x).ry(y == null ? x : y);\n    }\n  });\n  SVG.extend(SVG.Path, {\n    // Get path length\n    length: function length() {\n      return this.node.getTotalLength();\n    } // Get point at length\n    ,\n    pointAt: function pointAt(length) {\n      return this.node.getPointAtLength(length);\n    }\n  });\n  SVG.extend(SVG.Parent, SVG.Text, SVG.Tspan, SVG.FX, {\n    // Set font\n    font: function font(a, v) {\n      if (typeof a == 'object') {\n        for (v in a) {\n          this.font(v, a[v]);\n        }\n      }\n\n      return a == 'leading' ? this.leading(v) : a == 'anchor' ? this.attr('text-anchor', v) : a == 'size' || a == 'family' || a == 'weight' || a == 'stretch' || a == 'variant' || a == 'style' ? this.attr('font-' + a, v) : this.attr(a, v);\n    }\n  });\n  SVG.Set = SVG.invent({\n    // Initialize\n    create: function create(members) {\n      if (members instanceof SVG.Set) {\n        this.members = members.members.slice();\n      } else {\n        Array.isArray(members) ? this.members = members : this.clear();\n      }\n    } // Add class methods\n    ,\n    extend: {\n      // Add element to set\n      add: function add() {\n        var i,\n            il,\n            elements = [].slice.call(arguments);\n\n        for (i = 0, il = elements.length; i < il; i++) {\n          this.members.push(elements[i]);\n        }\n\n        return this;\n      } // Remove element from set\n      ,\n      remove: function remove(element) {\n        var i = this.index(element); // remove given child\n\n        if (i > -1) this.members.splice(i, 1);\n        return this;\n      } // Iterate over all members\n      ,\n      each: function each(block) {\n        for (var i = 0, il = this.members.length; i < il; i++) {\n          block.apply(this.members[i], [i, this.members]);\n        }\n\n        return this;\n      } // Restore to defaults\n      ,\n      clear: function clear() {\n        // initialize store\n        this.members = [];\n        return this;\n      } // Get the length of a set\n      ,\n      length: function length() {\n        return this.members.length;\n      } // Checks if a given element is present in set\n      ,\n      has: function has(element) {\n        return this.index(element) >= 0;\n      } // retuns index of given element in set\n      ,\n      index: function index(element) {\n        return this.members.indexOf(element);\n      } // Get member at given index\n      ,\n      get: function get(i) {\n        return this.members[i];\n      } // Get first member\n      ,\n      first: function first() {\n        return this.get(0);\n      } // Get last member\n      ,\n      last: function last() {\n        return this.get(this.members.length - 1);\n      } // Default value\n      ,\n      valueOf: function valueOf() {\n        return this.members;\n      } // Get the bounding box of all members included or empty box if set has no items\n      ,\n      bbox: function bbox() {\n        // return an empty box of there are no members\n        if (this.members.length == 0) return new SVG.RBox(); // get the first rbox and update the target bbox\n\n        var rbox = this.members[0].rbox(this.members[0].doc());\n        this.each(function () {\n          // user rbox for correct position and visual representation\n          rbox = rbox.merge(this.rbox(this.doc()));\n        });\n        return rbox;\n      }\n    } // Add parent method\n    ,\n    construct: {\n      // Create a new set\n      set: function set(members) {\n        return new SVG.Set(members);\n      }\n    }\n  });\n  SVG.FX.Set = SVG.invent({\n    // Initialize node\n    create: function create(set) {\n      // store reference to set\n      this.set = set;\n    }\n  }); // Alias methods\n\n  SVG.Set.inherit = function () {\n    var m,\n        methods = []; // gather shape methods\n\n    for (var m in SVG.Shape.prototype) {\n      if (typeof SVG.Shape.prototype[m] == 'function' && typeof SVG.Set.prototype[m] != 'function') methods.push(m);\n    } // apply shape aliasses\n\n\n    methods.forEach(function (method) {\n      SVG.Set.prototype[method] = function () {\n        for (var i = 0, il = this.members.length; i < il; i++) {\n          if (this.members[i] && typeof this.members[i][method] == 'function') this.members[i][method].apply(this.members[i], arguments);\n        }\n\n        return method == 'animate' ? this.fx || (this.fx = new SVG.FX.Set(this)) : this;\n      };\n    }); // clear methods for the next round\n\n    methods = []; // gather fx methods\n\n    for (var m in SVG.FX.prototype) {\n      if (typeof SVG.FX.prototype[m] == 'function' && typeof SVG.FX.Set.prototype[m] != 'function') methods.push(m);\n    } // apply fx aliasses\n\n\n    methods.forEach(function (method) {\n      SVG.FX.Set.prototype[method] = function () {\n        for (var i = 0, il = this.set.members.length; i < il; i++) {\n          this.set.members[i].fx[method].apply(this.set.members[i].fx, arguments);\n        }\n\n        return this;\n      };\n    });\n  };\n\n  SVG.extend(SVG.Element, {\n    // Store data values on svg nodes\n    data: function data(a, v, r) {\n      if (typeof a == 'object') {\n        for (v in a) {\n          this.data(v, a[v]);\n        }\n      } else if (arguments.length < 2) {\n        try {\n          return JSON.parse(this.attr('data-' + a));\n        } catch (e) {\n          return this.attr('data-' + a);\n        }\n      } else {\n        this.attr('data-' + a, v === null ? null : r === true || typeof v === 'string' || typeof v === 'number' ? v : JSON.stringify(v));\n      }\n\n      return this;\n    }\n  });\n  SVG.extend(SVG.Element, {\n    // Remember arbitrary data\n    remember: function remember(k, v) {\n      // remember every item in an object individually\n      if (typeof arguments[0] == 'object') for (var v in k) {\n        this.remember(v, k[v]);\n      } // retrieve memory\n      else if (arguments.length == 1) return this.memory()[k]; // store memory\n        else this.memory()[k] = v;\n      return this;\n    } // Erase a given memory\n    ,\n    forget: function forget() {\n      if (arguments.length == 0) this._memory = {};else for (var i = arguments.length - 1; i >= 0; i--) {\n        delete this.memory()[arguments[i]];\n      }\n      return this;\n    } // Initialize or return local memory object\n    ,\n    memory: function memory() {\n      return this._memory || (this._memory = {});\n    }\n  }); // Method for getting an element by id\n\n  SVG.get = function (id) {\n    var node = document.getElementById(idFromReference(id) || id);\n    return SVG.adopt(node);\n  }; // Select elements by query string\n\n\n  SVG.select = function (query, parent) {\n    return new SVG.Set(SVG.utils.map((parent || document).querySelectorAll(query), function (node) {\n      return SVG.adopt(node);\n    }));\n  };\n\n  SVG.extend(SVG.Parent, {\n    // Scoped select method\n    select: function select(query) {\n      return SVG.select(query, this.node);\n    }\n  });\n\n  function pathRegReplace(a, b, c, d) {\n    return c + d.replace(SVG.regex.dots, ' .');\n  } // creates deep clone of array\n\n\n  function array_clone(arr) {\n    var clone = arr.slice(0);\n\n    for (var i = clone.length; i--;) {\n      if (Array.isArray(clone[i])) {\n        clone[i] = array_clone(clone[i]);\n      }\n    }\n\n    return clone;\n  } // tests if a given element is instance of an object\n\n\n  function _is(el, obj) {\n    return el instanceof obj;\n  } // tests if a given selector matches an element\n\n\n  function _matches(el, selector) {\n    return (el.matches || el.matchesSelector || el.msMatchesSelector || el.mozMatchesSelector || el.webkitMatchesSelector || el.oMatchesSelector).call(el, selector);\n  } // Convert dash-separated-string to camelCase\n\n\n  function camelCase(s) {\n    return s.toLowerCase().replace(/-(.)/g, function (m, g) {\n      return g.toUpperCase();\n    });\n  } // Capitalize first letter of a string\n\n\n  function capitalize(s) {\n    return s.charAt(0).toUpperCase() + s.slice(1);\n  } // Ensure to six-based hex\n\n\n  function fullHex(hex) {\n    return hex.length == 4 ? ['#', hex.substring(1, 2), hex.substring(1, 2), hex.substring(2, 3), hex.substring(2, 3), hex.substring(3, 4), hex.substring(3, 4)].join('') : hex;\n  } // Component to hex value\n\n\n  function compToHex(comp) {\n    var hex = comp.toString(16);\n    return hex.length == 1 ? '0' + hex : hex;\n  } // Calculate proportional width and height values when necessary\n\n\n  function proportionalSize(element, width, height) {\n    if (width == null || height == null) {\n      var box = element.bbox();\n      if (width == null) width = box.width / box.height * height;else if (height == null) height = box.height / box.width * width;\n    }\n\n    return {\n      width: width,\n      height: height\n    };\n  } // Delta transform point\n\n\n  function deltaTransformPoint(matrix, x, y) {\n    return {\n      x: x * matrix.a + y * matrix.c + 0,\n      y: x * matrix.b + y * matrix.d + 0\n    };\n  } // Map matrix array to object\n\n\n  function arrayToMatrix(a) {\n    return {\n      a: a[0],\n      b: a[1],\n      c: a[2],\n      d: a[3],\n      e: a[4],\n      f: a[5]\n    };\n  } // Parse matrix if required\n\n\n  function parseMatrix(matrix) {\n    if (!(matrix instanceof SVG.Matrix)) matrix = new SVG.Matrix(matrix);\n    return matrix;\n  } // Add centre point to transform object\n\n\n  function ensureCentre(o, target) {\n    o.cx = o.cx == null ? target.bbox().cx : o.cx;\n    o.cy = o.cy == null ? target.bbox().cy : o.cy;\n  } // PathArray Helpers\n\n\n  function arrayToString(a) {\n    for (var i = 0, il = a.length, s = ''; i < il; i++) {\n      s += a[i][0];\n\n      if (a[i][1] != null) {\n        s += a[i][1];\n\n        if (a[i][2] != null) {\n          s += ' ';\n          s += a[i][2];\n\n          if (a[i][3] != null) {\n            s += ' ';\n            s += a[i][3];\n            s += ' ';\n            s += a[i][4];\n\n            if (a[i][5] != null) {\n              s += ' ';\n              s += a[i][5];\n              s += ' ';\n              s += a[i][6];\n\n              if (a[i][7] != null) {\n                s += ' ';\n                s += a[i][7];\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s + ' ';\n  } // Deep new id assignment\n\n\n  function assignNewId(node) {\n    // do the same for SVG child nodes as well\n    for (var i = node.childNodes.length - 1; i >= 0; i--) {\n      if (node.childNodes[i] instanceof window.SVGElement) assignNewId(node.childNodes[i]);\n    }\n\n    return SVG.adopt(node).id(SVG.eid(node.nodeName));\n  } // Add more bounding box properties\n\n\n  function fullBox(b) {\n    if (b.x == null) {\n      b.x = 0;\n      b.y = 0;\n      b.width = 0;\n      b.height = 0;\n    }\n\n    b.w = b.width;\n    b.h = b.height;\n    b.x2 = b.x + b.width;\n    b.y2 = b.y + b.height;\n    b.cx = b.x + b.width / 2;\n    b.cy = b.y + b.height / 2;\n    return b;\n  } // Get id from reference string\n\n\n  function idFromReference(url) {\n    var m = (url || '').toString().match(SVG.regex.reference);\n    if (m) return m[1];\n  } // If values like 1e-88 are passed, this is not a valid 32 bit float,\n  // but in those cases, we are so close to 0 that 0 works well!\n\n\n  function float32String(v) {\n    return Math.abs(v) > 1e-37 ? v : 0;\n  } // Create matrix array for looping\n\n\n  var abcdef = 'abcdef'.split(''); // Add CustomEvent to IE9 and IE10\n\n  if (typeof window.CustomEvent !== 'function') {\n    // Code from: https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent\n    var CustomEventPoly = function CustomEventPoly(event, options) {\n      options = options || {\n        bubbles: false,\n        cancelable: false,\n        detail: undefined\n      };\n      var e = document.createEvent('CustomEvent');\n      e.initCustomEvent(event, options.bubbles, options.cancelable, options.detail);\n      return e;\n    };\n\n    CustomEventPoly.prototype = window.Event.prototype;\n    SVG.CustomEvent = CustomEventPoly;\n  } else {\n    SVG.CustomEvent = window.CustomEvent;\n  } // requestAnimationFrame / cancelAnimationFrame Polyfill with fallback based on Paul Irish\n\n\n  (function (w) {\n    var lastTime = 0;\n    var vendors = ['moz', 'webkit'];\n\n    for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {\n      w.requestAnimationFrame = w[vendors[x] + 'RequestAnimationFrame'];\n      w.cancelAnimationFrame = w[vendors[x] + 'CancelAnimationFrame'] || w[vendors[x] + 'CancelRequestAnimationFrame'];\n    }\n\n    w.requestAnimationFrame = w.requestAnimationFrame || function (callback) {\n      var currTime = new Date().getTime();\n      var timeToCall = Math.max(0, 16 - (currTime - lastTime));\n      var id = w.setTimeout(function () {\n        callback(currTime + timeToCall);\n      }, timeToCall);\n      lastTime = currTime + timeToCall;\n      return id;\n    };\n\n    w.cancelAnimationFrame = w.cancelAnimationFrame || w.clearTimeout;\n  })(window);\n\n  return SVG;\n});"],"sourceRoot":""}