{"version":3,"sources":["../node_modules/reactstrap/es/CardHeader.js","pages/provider/Notification/Notification.jsx","components/Modal/NotificationSettingModal.jsx","api/notificationSettingApi.js","pages/provider/Notification/index.js","pages/provider/Notification/ListNotification.jsx"],"names":["_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_2__","react__WEBPACK_IMPORTED_MODULE_2___default","n","prop_types__WEBPACK_IMPORTED_MODULE_3__","prop_types__WEBPACK_IMPORTED_MODULE_3___default","classnames__WEBPACK_IMPORTED_MODULE_4__","classnames__WEBPACK_IMPORTED_MODULE_4___default","_utils__WEBPACK_IMPORTED_MODULE_5__","propTypes","tag","className","a","string","cssModule","object","CardHeader","props","Tag","attributes","Object","classes","createElement","defaultProps","__webpack_exports__","RenderContent","type","notification","updateNotification","Number","notificationType","cons","NOTIFICATION_TYPES","ADMIN_ADD_NEW_POST","MESSAGE_FROM_ADMIN","react_default","Notification_Community","UPCOMING_BOOKING_REMINDER","UPCOMING_BOOKING_REMINDER_OLD","Notification_UpcomingBooking","CLIENT_MESSAGES","Notification_Message","ADMIN_EDIT_BOOKING","Notification_AdminEditBooking","CHANGE_MAKE_BY_ADMIN","Notification_ChangeMakeByAdmin","CLIENT_CHECK_IN","Notification_ClientCheckIn","BOOKING_CREATED","Notification_BookingCreated","Notification_ManualNotification","Community","content","JSON","parse","message","_","get","displayMessage","splitContent","react_router_dom","to","onClick","id","read","UpcomingBooking","start_date","start_time","end_time","_content$space","space","spaceName","venueName","getDateFormat","getTime","concat","Message","clientName","getModalUserFullName","client","pathname","state","goToMessagesPage","AdminEditBooking","getSpaceName","name","venue","ChangeMakeByAdmin","ClientCheckIn","getUserFullName","ManualNotification","BookingCreated","getDateTime","Notification","timeStamp","createdAt","notificationTypeInfo","isNull","NOTIFICATION_TYPES_INFO","find","elm","contentType","Row","title","Col","Notification_RenderContent","NotificationSettingModal","isOpen","toggle","handle","notificationSetting","handleMultipleSelectNotificationTypes","Modal","aria-label","data-dismiss","aria-hidden","Label","Input","checked","clientMessages","onChange","e","htmlFor","upcomingBookingReminder","upcomingClientAppointment","changeMakeByAdmin","messageFromAdmin","clientCheckIn","Button","color","outline","endpoint","notificationSettingApi","getNotificationSetting","_getNotificationSetting","asyncToGenerator","regenerator_default","mark","_callee","path","response","wrap","_context","prev","next","sent","abrupt","data","stop","apply","this","arguments","updateNotificationSetting","_updateNotificationSetting","_callee2","payload","_context2","patch","_x","dispatch","useDispatch","notificationData","useSelector","loading","_useState","useState","_useState2","slicedToArray","isShowSettingModal","setIsShowSettingModal","toggleSettingNotification","_useState3","_useState4","setNotificationSetting","useEffect","getListNotification","then","res","catch","err","toast","error","handleUpdateNotification","value","listNotification","result","Container","Loading","bookingCreated","clientAppointmentStart","success","console","log","obj","_e$target","target","objectSpread","Card","unReadNotifications","filter","item","forEach","markAllReadNotification","markAllRead","CardBody","map","provider_Notification_Notification","key"],"mappings":"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","file":"static/js/41.68de6e70.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar CardHeader = function CardHeader(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"tag\"]);\n\n  var classes = mapToCssModules(classNames(className, 'card-header'), cssModule);\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nCardHeader.propTypes = propTypes;\nCardHeader.defaultProps = defaultProps;\nexport default CardHeader;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport _ from 'lodash';\r\nimport { Row, Col } from 'reactstrap';\r\nimport cons from '../../../constants'\r\nimport './Notification.scss';\r\nimport { getUserFullName, getModalUserFullName, getDateTime, splitContent, getDateFormat, getTime } from '../../../helpers/UtilsHelper';\r\n\r\nconst Notification = (props) => {\r\n    const { notification, updateNotification } = props\r\n    const timeStamp = getDateTime(notification.createdAt)\r\n    const notificationTypeInfo = !_.isNull(notification) && cons.NOTIFICATION_TYPES_INFO.find(elm => elm.id === Number(notification.notificationType))\r\n    const type = notificationTypeInfo ? notificationTypeInfo.contentType : 'Unknown'\r\n    return (\r\n        <div className=\"ml-3 my-3 notification\">\r\n            <Row >\r\n                <div>\r\n                    {!notification.read ?\r\n                        <i className=\"fas fa-bell cursor-pointer\" onClick={() => updateNotification(notification.id, true)} />\r\n                        : <i className=\"far fa-bell\" title=\"Bookmark unread\" onClick={() => updateNotification(notification.id, false)} />\r\n                    }\r\n                </div>\r\n                <Col> <RenderContent type={type} notification={notification} updateNotification={updateNotification} /></Col>\r\n            </Row>\r\n            <div className=\"text-right notification__timestamp\">\r\n                <span>{timeStamp}</span>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst RenderContent = (props) => {\r\n    const { type, notification, updateNotification } = props;\r\n    switch (Number(notification.notificationType)) {\r\n        case cons.NOTIFICATION_TYPES.ADMIN_ADD_NEW_POST:\r\n            return <Community\r\n                type={type}\r\n                notification={notification}\r\n                updateNotification={updateNotification}\r\n            />\r\n        case cons.NOTIFICATION_TYPES.MESSAGE_FROM_ADMIN:\r\n            return <Community\r\n                type={type}\r\n                notification={notification}\r\n                updateNotification={updateNotification}\r\n            />\r\n\r\n        case cons.NOTIFICATION_TYPES.UPCOMING_BOOKING_REMINDER:\r\n            return <UpcomingBooking\r\n                type={type}\r\n                notification={notification}\r\n                updateNotification={updateNotification}\r\n            />\r\n\r\n        case cons.NOTIFICATION_TYPES.UPCOMING_BOOKING_REMINDER_OLD:\r\n            return <UpcomingBooking\r\n                type={type}\r\n                notification={notification}\r\n                updateNotification={updateNotification}\r\n            />\r\n\r\n        case cons.NOTIFICATION_TYPES.CLIENT_MESSAGES:\r\n            return <Message\r\n                type={type}\r\n                notification={notification}\r\n                updateNotification={updateNotification}\r\n            />\r\n\r\n        case cons.NOTIFICATION_TYPES.ADMIN_EDIT_BOOKING:\r\n            return <AdminEditBooking\r\n                type={type}\r\n                notification={notification}\r\n                updateNotification={updateNotification}\r\n            />\r\n\r\n        case cons.NOTIFICATION_TYPES.CHANGE_MAKE_BY_ADMIN:\r\n            return <ChangeMakeByAdmin\r\n                type={type}\r\n                notification={notification}\r\n                updateNotification={updateNotification}\r\n            />\r\n\r\n        case cons.NOTIFICATION_TYPES.CLIENT_CHECK_IN:\r\n            return <ClientCheckIn\r\n                type={type}\r\n                notification={notification}\r\n                updateNotification={updateNotification}\r\n            />\r\n        case cons.NOTIFICATION_TYPES.BOOKING_CREATED:\r\n            return <BookingCreated\r\n                type={type}\r\n                notification={notification}\r\n                updateNotification={updateNotification}\r\n            />\r\n\r\n        default:\r\n            return <ManualNotification\r\n                type={type}\r\n                notification={notification}\r\n            />\r\n    }\r\n}\r\n\r\nconst Community = (props) => {\r\n    const { type, notification, updateNotification } = props;\r\n    const content = JSON.parse(notification.content)\r\n    const message = _.get(content, \"content\", \"\")\r\n    const displayMessage = message && splitContent(message);\r\n    return (\r\n        <Link to={\"/provider/community\"} onClick={() => updateNotification(notification.id, true)}>\r\n            <h4 className={!notification.read ? \"active-message\" : \"inactive-message\"}><span>{type}</span> - {displayMessage}</h4>\r\n        </Link>\r\n    )\r\n}\r\n\r\nconst UpcomingBooking = (props) => {\r\n    const { type, notification, updateNotification } = props;\r\n    const content = JSON.parse(notification.content)\r\n    const { start_date, start_time, end_time, space = {} } = content\r\n    const spaceName = _.get(space, \"name\", \"Non-Ethera\")\r\n    const venueName = _.get(space, \"venue.name\", \"\")\r\n    return (\r\n        <Link to={\"/provider/bookings\"} onClick={() => updateNotification(notification.id, true)}>\r\n            <h4 className={!notification.read ? \"active-message\" : \"inactive-message\"}>\r\n                <span>{type}</span> - Upcoming Booking on\r\n                <span> {getDateFormat(start_date)}</span> from\r\n                <span> {getTime(`${start_date} ${start_time}`)}</span> to\r\n                <span> {getTime(`${start_date} ${end_time}`)}</span> at\r\n                <span> {spaceName}</span> {space ? \"in\" : \"\"}\r\n                {space && <span> {venueName}</span>}\r\n            </h4>\r\n        </Link>\r\n    )\r\n}\r\n\r\nconst Message = (props) => {\r\n    const { type, notification, updateNotification } = props;\r\n    const content = JSON.parse(notification.content)\r\n    const clientName = content && getModalUserFullName(content.client)\r\n    return (\r\n        <Link to={{\r\n            pathname: `/provider/clients/${content.client.id}`,\r\n            state: {\r\n                goToMessagesPage: true\r\n            }\r\n        }} onClick={() => updateNotification(notification.id, true)}>\r\n            <h4 className={!notification.read ? \"active-message\" : \"inactive-message\"}><span>{type}</span> - Message received from <span >{clientName}</span></h4>\r\n        </Link>\r\n    )\r\n}\r\n\r\nconst AdminEditBooking = (props) => {\r\n    const { type, notification, updateNotification } = props;\r\n    return (\r\n        <Link to={\"/provider/bookings\"} onClick={() => updateNotification(notification.id, true)}>\r\n            <h4 className={!notification.read ? \"active-message\" : \"inactive-message\"}>\r\n                <span>{type}</span>\r\n            </h4>\r\n        </Link>\r\n    )\r\n}\r\n\r\nconst getSpaceName = (space) => {\r\n    if (!space || !space.name) {\r\n        return \"Alternate space\";\r\n    }\r\n    else {\r\n        const { venue } = space;\r\n        return `${space.name} | ${venue.name}`;\r\n    }\r\n}\r\n\r\nconst ChangeMakeByAdmin = (props) => {\r\n    const { type, notification, updateNotification } = props;\r\n    const content = JSON.parse(notification.content)\r\n    const { start_date, start_time } = content\r\n    return (\r\n        <h4 className={`cursor-pointer ${!notification.read ? \"active-message\" : \"inactive-message\"}`} onClick={() => updateNotification(notification.id, true)}>\r\n            <span>{type} </span>\r\n            - There has been a change to one of your bookings\r\n            (on <span>{getDateFormat(start_date)}</span> from <span>{getTime(`${start_date} ${start_time}`)}</span> at <span>{getSpaceName(content.space)}</span>),\r\n            please contact the Admin for more information.\r\n        </h4>\r\n    )\r\n}\r\n\r\nconst ClientCheckIn = (props) => {\r\n    const { type, notification, updateNotification } = props;\r\n    const content = JSON.parse(notification.content)\r\n    const { start_time } = content\r\n    const clientName = content && getUserFullName(content.client)\r\n    return (\r\n        <h4 className={`cursor-pointer ${!notification.read ? \"active-message\" : \"inactive-message\"}`} onClick={() => updateNotification(notification.id, true)}>\r\n            <span>{type} </span>\r\n            - <span>{clientName}</span> has checked in for their appointment at <span>{start_time}</span>\r\n        </h4>\r\n    )\r\n}\r\n\r\nconst ManualNotification = (props) => {\r\n    const { type, notification } = props;\r\n    return <h4 className={!notification.read ? \"active-message\" : \"inactive-message\"}><span>{type}</span></h4>\r\n}\r\n\r\n\r\nconst BookingCreated = (props) => {\r\n    const { type, notification, updateNotification } = props;\r\n    const content = JSON.parse(notification.content)\r\n    const { start_time, start_date } = content\r\n    const spaceName = getSpaceName(content.space)\r\n    return (\r\n        <h4 className={`cursor-pointer ${!notification.read ? \"active-message\" : \"inactive-message\"}`} onClick={() => updateNotification(notification.id, true)}>\r\n            <span>{type} </span>\r\n            - on <span>{getDateTime(`${start_date} ${start_time}`)}</span> at <span>{spaceName}</span>\r\n        </h4>\r\n    )\r\n}\r\n\r\nexport default Notification;","import React from \"react\";\r\nimport { Button, Modal, Label, Input } from \"reactstrap\";\r\n\r\nexport default function NotificationSettingModal(props) {\r\n  const {\r\n    isOpen,\r\n    toggle,\r\n    handle,\r\n    notificationSetting,\r\n    handleMultipleSelectNotificationTypes,\r\n  } = props;\r\n  return (\r\n    <Modal className=\"modal-dialog-centered\" isOpen={isOpen} toggle={toggle}>\r\n      <div className=\"modal-header\">\r\n        <h6 className=\"modal-title\" id=\"modal-title-default\">\r\n          Notification Settings\r\n        </h6>\r\n        <button\r\n          aria-label=\"Close\"\r\n          className=\"close\"\r\n          data-dismiss=\"modal\"\r\n          type=\"button\"\r\n          onClick={toggle}\r\n        >\r\n          <span aria-hidden={true}>×</span>\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"modal-body text-center\">\r\n        <Label className=\"form-control-label mb-3\">\r\n          Select the type of notifications displayed\r\n        </Label>\r\n        <div className=\"mx-3\">\r\n          <div className=\"custom-control custom-checkbox text-left mb-3\">\r\n            <Input\r\n              className=\"custom-control-input\"\r\n              type=\"checkbox\"\r\n              name=\"clientMessages\"\r\n              id=\"clientMessages\"\r\n              checked={notificationSetting.clientMessages}\r\n              onChange={(e) =>\r\n                handleMultipleSelectNotificationTypes(e, notificationSetting)\r\n              }\r\n            />\r\n            <Label className=\"custom-control-label\" htmlFor=\"clientMessages\">\r\n              Messages from client\r\n            </Label>\r\n          </div>\r\n\r\n          {/* <div className=\"custom-control custom-checkbox text-left mb-3\">\r\n            <Input\r\n              className=\"custom-control-input\"\r\n              type=\"checkbox\"\r\n              name=\"bookingCreated\"\r\n              id=\"bookingCreated\"\r\n              checked={notificationSetting.bookingCreated}\r\n              onChange={(e) => handleMultipleSelectNotificationTypes(e, notificationSetting)}\r\n            />\r\n            <Label className=\"custom-control-label\" htmlFor=\"bookingCreated\">\r\n              Booking created\r\n              </Label>\r\n          </div> */}\r\n\r\n          <div className=\"custom-control custom-checkbox text-left mb-3\">\r\n            <Input\r\n              className=\"custom-control-input\"\r\n              type=\"checkbox\"\r\n              name=\"upcomingBookingReminder\"\r\n              id=\"upcomingBookingReminder\"\r\n              checked={notificationSetting.upcomingBookingReminder}\r\n              onChange={(e) =>\r\n                handleMultipleSelectNotificationTypes(e, notificationSetting)\r\n              }\r\n            />\r\n            <Label\r\n              className=\"custom-control-label\"\r\n              htmlFor=\"upcomingBookingReminder\"\r\n            >\r\n              Upcoming booking reminder\r\n            </Label>\r\n          </div>\r\n\r\n          <div className=\"custom-control custom-checkbox text-left mb-3\">\r\n            <Input\r\n              className=\"custom-control-input\"\r\n              type=\"checkbox\"\r\n              name=\"upcomingClientAppointment\"\r\n              id=\"upcomingClientAppointment\"\r\n              checked={notificationSetting.upcomingClientAppointment}\r\n              onChange={(e) =>\r\n                handleMultipleSelectNotificationTypes(e, notificationSetting)\r\n              }\r\n            />\r\n            <Label\r\n              className=\"custom-control-label\"\r\n              htmlFor=\"upcomingClientAppointment\"\r\n            >\r\n              Upcoming client appointment\r\n            </Label>\r\n          </div>\r\n\r\n          <div className=\"custom-control custom-checkbox text-left mb-3\">\r\n            <Input\r\n              className=\"custom-control-input\"\r\n              type=\"checkbox\"\r\n              name=\"changeMakeByAdmin\"\r\n              id=\"changeMakeByAdmin\"\r\n              checked={notificationSetting.changeMakeByAdmin}\r\n              onChange={(e) =>\r\n                handleMultipleSelectNotificationTypes(e, notificationSetting)\r\n              }\r\n            />\r\n            <Label className=\"custom-control-label\" htmlFor=\"changeMakeByAdmin\">\r\n              Changes made by admin\r\n            </Label>\r\n          </div>\r\n\r\n          <div className=\"custom-control custom-checkbox text-left mb-3\">\r\n            <Input\r\n              className=\"custom-control-input\"\r\n              type=\"checkbox\"\r\n              name=\"messageFromAdmin\"\r\n              id=\"messageFromAdmin\"\r\n              checked={notificationSetting.messageFromAdmin}\r\n              onChange={(e) =>\r\n                handleMultipleSelectNotificationTypes(e, notificationSetting)\r\n              }\r\n            />\r\n            <Label className=\"custom-control-label\" htmlFor=\"messageFromAdmin\">\r\n              Admin adds new post\r\n            </Label>\r\n          </div>\r\n\r\n          <div className=\"custom-control custom-checkbox text-left mb-3\">\r\n            <Input\r\n              className=\"custom-control-input\"\r\n              type=\"checkbox\"\r\n              name=\"clientCheckIn\"\r\n              id=\"clientCheckIn\"\r\n              checked={notificationSetting.clientCheckIn}\r\n              onChange={(e) =>\r\n                handleMultipleSelectNotificationTypes(e, notificationSetting)\r\n              }\r\n            />\r\n            <Label className=\"custom-control-label\" htmlFor=\"clientCheckIn\">\r\n              Client check in\r\n            </Label>\r\n          </div>\r\n\r\n          {/* <div className=\"custom-control custom-checkbox text-left mb-3\">\r\n            <Input\r\n              className=\"custom-control-input\"\r\n              type=\"checkbox\"\r\n              name=\"clientAppointmentStart\"\r\n              id=\"clientAppointmentStart\"\r\n              checked={notificationSetting.clientAppointmentStart}\r\n              onChange={(e) => handleMultipleSelectNotificationTypes(e, notificationSetting)}\r\n            />\r\n            <Label className=\"custom-control-label\" htmlFor=\"clientAppointmentStart\">\r\n              Client appointment start\r\n              </Label>\r\n          </div> */}\r\n        </div>\r\n      </div>\r\n      <div className=\"modal-footer\">\r\n        <Button\r\n          color=\"danger\"\r\n          outline\r\n          data-dismiss=\"modal\"\r\n          type=\"button\"\r\n          onClick={toggle}\r\n        >\r\n          Cancel\r\n        </Button>\r\n        <Button\r\n          className=\"ml-auto\"\r\n          color=\"success\"\r\n          type=\"button\"\r\n          onClick={handle}\r\n        >\r\n          Save\r\n        </Button>\r\n      </div>\r\n    </Modal>\r\n  );\r\n}\r\n","import client from '../helpers/HttpClient'\r\nconst endpoint = '/provider-notification-settings';\r\n\r\nexport default {\r\n    async getNotificationSetting() {\r\n        let path = `${endpoint}/me`;\r\n        let response = await client.get(path);\r\n        return response.data;\r\n    },\r\n    async updateNotificationSetting(payload) {\r\n        let path = `${endpoint}/me`;\r\n        let response = await client.patch(path, payload);\r\n        return response.data;\r\n    },\r\n}\r\n","import Notification from './ListNotification';\r\n\r\nexport default Notification;","import React from \"react\";\r\nimport _ from \"lodash\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  Container,\r\n  Card,\r\n  CardHeader,\r\n  CardBody,\r\n  Row,\r\n  Col,\r\n  Button,\r\n} from \"reactstrap\";\r\nimport {\r\n  getListNotification,\r\n  updateNotification,\r\n  markAllReadNotification,\r\n} from \"../../../redux/actions/notificationAction\";\r\nimport Notification from \"./Notification\";\r\nimport \"./ListNotification.scss\";\r\nimport NotificationSettingModal from \"components/Modal/NotificationSettingModal\";\r\nimport notificationSettingApi from \"../../../api/notificationSettingApi\";\r\nimport Loading from \"../../../components/Loading\";\r\nimport { toast } from \"react-toastify\";\r\nimport { useState } from \"react\";\r\nimport { useEffect } from \"react\";\r\n\r\nexport default function ListNotification(props) {\r\n  const dispatch = useDispatch();\r\n  const notificationData = useSelector((state) => state.notification.data);\r\n  const loading = useSelector((state) => state.notification.loading);\r\n  const [isShowSettingModal, setIsShowSettingModal] = useState(false);\r\n  const toggleSettingNotification = () => {\r\n    setIsShowSettingModal(!isShowSettingModal);\r\n  };\r\n  const [notificationSetting, setNotificationSetting] = useState({});\r\n\r\n  useEffect(() => {\r\n    dispatch(getListNotification());\r\n    notificationSettingApi\r\n      .getNotificationSetting()\r\n      .then((res) => {\r\n        setNotificationSetting(res);\r\n      })\r\n      .catch((err) => {\r\n        toast.error(\"get fail\");\r\n      });\r\n  }, []);\r\n\r\n  const handleUpdateNotification = (id, value) => {\r\n    let data = { read: value };\r\n    dispatch(updateNotification(id, data));\r\n  };\r\n\r\n  const markAllRead = (listNotification) => {\r\n    let unReadNotifications = listNotification.filter((item) => !item.read);\r\n    !_.isNull(unReadNotifications) &&\r\n      unReadNotifications.forEach((elm) => {\r\n        dispatch(markAllReadNotification(elm.id, { read: true }));\r\n      });\r\n  };\r\n\r\n  const handleMultipleSelectNotificationTypes = (e, obj) => {\r\n    const { checked, name } = e.target;\r\n    obj[name] = checked;\r\n    setNotificationSetting({ ...obj });\r\n  };\r\n\r\n  const applyNotificationSetting = () => {\r\n    const {\r\n      bookingCreated,\r\n      clientMessages,\r\n      upcomingBookingReminder,\r\n      upcomingClientAppointment,\r\n      changeMakeByAdmin,\r\n      messageFromAdmin,\r\n      clientCheckIn,\r\n      clientAppointmentStart,\r\n    } = notificationSetting;\r\n    const data = {\r\n      bookingCreated,\r\n      clientMessages,\r\n      upcomingBookingReminder,\r\n      upcomingClientAppointment,\r\n      changeMakeByAdmin,\r\n      messageFromAdmin,\r\n      clientCheckIn,\r\n      clientAppointmentStart,\r\n    };\r\n    notificationSettingApi\r\n      .updateNotificationSetting(data)\r\n      .then((res) => {\r\n        setNotificationSetting(res);\r\n        toast.success(\"Update notification setting success\");\r\n        toggleSettingNotification();\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        toast.error(\"Update notification setting fail\");\r\n      });\r\n  };\r\n\r\n  const listNotification = notificationData.result;\r\n\r\n  return (\r\n    <Container className=\"list-notification\">\r\n      {loading && <Loading />}\r\n      <NotificationSettingModal\r\n        isOpen={isShowSettingModal}\r\n        toggle={toggleSettingNotification}\r\n        handle={applyNotificationSetting}\r\n        notificationSetting={notificationSetting}\r\n        handleMultipleSelectNotificationTypes={\r\n          handleMultipleSelectNotificationTypes\r\n        }\r\n      />\r\n      <Card className=\"my-3\">\r\n        <CardHeader className=\"ml-3\">\r\n          <Row>\r\n            <Col>\r\n              <h1>\r\n                <b>Notifications</b>\r\n              </h1>\r\n            </Col>\r\n            <Col className=\"text-center\">\r\n              <Button\r\n                color=\"link\"\r\n                onClick={() => markAllRead(listNotification)}\r\n              >\r\n                <i className=\"fas fa-check-double fa-sm\" /> Mark all as read{\" \"}\r\n              </Button>\r\n            </Col>\r\n            <Col className=\"text-right\">\r\n              <Button color=\"link\" onClick={toggleSettingNotification}>\r\n                <i className=\"fas fa-cog fa-lg\" />\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </CardHeader>\r\n        <CardBody>\r\n          {listNotification &&\r\n            listNotification.map((item) => {\r\n              return (\r\n                <Notification\r\n                  key={item.id}\r\n                  notification={item}\r\n                  updateNotification={handleUpdateNotification}\r\n                />\r\n              );\r\n            })}\r\n        </CardBody>\r\n      </Card>\r\n    </Container>\r\n  );\r\n}\r\n"],"sourceRoot":""}